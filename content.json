{"meta":{"title":"YoLinDeng's blog","subtitle":"","description":"YoLinDeng blog","author":"YoLin Deng","url":"http://yolindeng.gitee.io/myblog","root":"/myblog/"},"pages":[{"title":"关于","date":"2020-06-09T10:45:44.000Z","updated":"2021-05-21T02:31:57.598Z","comments":false,"path":"about/index.html","permalink":"http://yolindeng.gitee.io/myblog/about/index.html","excerpt":"","text":"关于我 博主本名邓咏凌，来自美丽客都、世界长寿之乡梅州蕉岭。2019年毕业于广东药科大学，信息管理与信息系统专业。在成为一名出色的前端开发者的道路上不断努力，让自己变成越来越优秀。平时喜欢打篮球、短跑、唱歌、听歌，想要踏足祖国的大好河山，领略不同地域的风土人情。等到秋叶终于金黄，华发悄然苍苍，愿我们相约老地方～ 在校经历 大学四年时光是如此的短暂且美好，脑海中的点点滴滴都已成回忆，在心间不停流转。 社团生活丰富多彩，大一加入学生会组织部作为干事、校田径队短跑队员，大二成为组织部部长、加入院篮球队，大三作为学生副书记。 获得二等奖学金，及运动类、社团类奖学金。三年参加了3次校运会，分别斩获2次第三，一次第一的成绩，最好成绩11.53。 大学期间最喜欢的运动莫过于篮球，成为我大学不可或缺的伙伴。 做过家教、手机店销售等兼职 工作经历 广东万丈金数信息技术股份有限公司（2019.5 - 至今）前端开发工程师（初级、中级） 移动端活动营销页面、微信公众号页面、微信及支付宝小程序开发 活动组件平台的node后端开发（基于egg.js和mongoDB） 公司内部后台管理系统开发 百家保系列产品开发… 深圳云之家网络有限公司(金蝶云之家)（2018.12 - 2019.3）web前端开发实习生 生态圈产品移动端及管理系统功能迭代开发 配合产品、UI、UE、后端、测试，完成页面功能交互，并上线。 中山蕉神科技（2018.7 - 2018.11）H5前端开发工程师实习生 负责活动页面开发 公众号体系开发"},{"title":"About me","date":"2020-05-27T07:46:53.000Z","updated":"2020-12-15T01:45:28.823Z","comments":false,"path":"about/me.html","permalink":"http://yolindeng.gitee.io/myblog/about/me.html","excerpt":"","text":""}],"posts":[{"title":"前端日常开发常用技巧与方法","slug":"前端日常开发常用技巧与方法","date":"2020-06-09T10:10:36.000Z","updated":"2021-05-20T09:25:27.286Z","comments":true,"path":"2020/06/09/前端日常开发常用技巧与方法/","link":"","permalink":"http://yolindeng.gitee.io/myblog/2020/06/09/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%96%B9%E6%B3%95/","excerpt":"","text":"CSS部分盒子边倾斜clip-path: polygon(12% 0, 100% 0, 100% 100%, 0 100%); 禁止点击事件/鼠标事件“穿透”123div * &#123; pointer-events: none; /*链接啊，点击事件啊，都没有效果了*/ &#125; 用来控制元素在移动设备上使用滚动回弹效果123.main&#123; -webkit-overflow-scrolling: touch;&#125; 可解决在IOS中使用overflow:auto 形成的滚动条，滚动不流畅的情况 文字渐变效果12345.text-gradient&#123; background-image: linear-gradient(135deg, deeppink, deepskyblue); -webkit-background-clip: text; color: transparent;&#125; css三角形12345678910111213#triangle-up &#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red;&#125; JS部分JavaScript中检测数组的方法(1)、typeof操作符 这种方法对一些常用的类型检查没有问题，但对array和null 都判断为object(2)、instanceof操作符 这个操作符是检测对象的原型链是否指向构造函数的prototype对象的(3)、对象的constructor属性 123const arr = []console.log(arr.constructor === Array) // true (4)、Object.prototype.toString 123const arr = []console.log(Object.prototype.toString.call(arr) === '[object Array]') // true (5)、Array.isArray() 常用的字符串操作 字符串转化toString() 字符串分隔split() 字符串替换replace() 获取长度length 查询子字符串 indexOf 返回指定位置的字符串或字符串编码 charAt charCodeAt 字符串匹配 match 字符串拼接concat 字符串的切割或提取slice() substring() substr() 字符串大小写转化 toLowerCase toUpperCase 字符串去空格 trim() 用来删除字符串前后的空格 其中第9中三者的区别如下：（1）slice(), 参数可以是负数，负数表示从字符串最后一个位置开始切割到对应结束位置（2）substring()，参数不可为负数，切割第一个位置到第二个位置的字符串（3）substr()， 参数不可为负数，第一个参数是开始位置，第二个参数为切割的长度字符串去重const str = ‘11122223333’const arr = str.split(‘’)const uniqueStr = […new Set(arr)].join(‘’) 常用的数组操作1、Array.map()此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组2、Array.forEach()此方法是将数组中的每个元素执行传进提供的函数，没有返回值，注意和map方法区分3、Array.filter()此方法是将满足条件的元素作为一个新数组返回4、Array.every()此方法将数组所有元素进行判断返回一个布尔值，如果所有元素都符合判断条件，则返回true，否则返回false5、Array.some()此方法将数组所有元素进行判断返回一个布尔值,如果有一个元素满足判断条件，则返回true，所有元素都不满足则返回false6、Array.reduce()此方法为所有元素调用返回函数7、Array.push()在数组最后面添加新元素8、Array.shift()删除数组第一个元素9、Array.pop()删除数组最后一个元素10、Array.unshift()在数组最前面增加元素11、Array.isArray()判断是否为一个数组12、Array.concat()数组拼接13、Array.toString()数组转化为字符串14、Array.join()数组转化为字符串，并用第一个参数作为连接符15、Array.splice(开始位置，删除个数，元素)####常用对象方法1、Object.assign()用于克隆，两个参数，将第二个对象分配到第一个中2、Object.is()用于判断两个值是否相同//注意，该函数与==运算符不同，不会强制转换任何类型， 应该更加类似于===，但值得注意的是它会将+0和-0视作不同值3、Object.keys()用于返回对象可枚举的属性和方法的名称，返回一个属性或方法名称的字符串数组。4、Object.defineProperty()劫持变量的set和get方法,将属性添加到对象，或修改现有属性的特性 12345var a = &#123;&#125;;Object.defineProperty(a, 'name', &#123; value : 'kong', enumerable : true //该属性是否可枚举&#125;) 5、Object.defineProperties()可添加多个属性,与Object.defineProperty()对应,6、isPrototypeOf 123function a()&#123;&#125; var b = new a();console.log(a.prototype.isPrototypeOf(b));//true 安卓监听可视区域变化，让输入框移动至可视区域123456789if (/Android/gi.test(navigator.userAgent)) &#123; window.addEventListener('resize', function () &#123; if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') &#123; window.setTimeout(function () &#123; document.activeElement.scrollIntoViewIfNeeded(); &#125;, 0); &#125; &#125;); &#125;; vue中平滑滚动到某个位置this.$refs.rule.scrollIntoView({ block: ‘start’, behavior: ‘smooth’ }) 好用的JavaSrcipt库与模块（包）日期时间处理库1、monent.js2、day.jsday相对于monent要轻量许多 高精度数学运算number-precision 123456NP.strip(num) // strip a number to nearest right numberNP.plus(num1, num2, num3, ...) // addition, num + num2 + num3, two numbers is required at least.NP.minus(num1, num2, num3, ...) // subtraction, num1 - num2 - num3NP.times(num1, num2, num3, ...) // multiplication, num1 * num2 * num3NP.divide(num1, num2, num3, ...) // division, num1 / num2 / num3NP.round(num, ratio) // round a number based on ratio 实用工具库Lodashlodash 是一个 JavaScript 实用工具库，提供一致性，及模块化、性能和配件等功能。Lodash 消除了处理数组的麻烦，从而简化了 JavaScript、 数字、对象、字符串等","categories":[{"name":"前端基础","slug":"前端基础","permalink":"http://yolindeng.gitee.io/myblog/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://yolindeng.gitee.io/myblog/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"javaScript","slug":"javaScript","permalink":"http://yolindeng.gitee.io/myblog/tags/javaScript/"},{"name":"css","slug":"css","permalink":"http://yolindeng.gitee.io/myblog/tags/css/"}]},{"title":"JS的数据类型及深浅拷贝介绍","slug":"JS的数据类型及深浅拷贝介绍","date":"2020-06-09T10:06:22.000Z","updated":"2021-05-20T09:25:44.542Z","comments":true,"path":"2020/06/09/JS的数据类型及深浅拷贝介绍/","link":"","permalink":"http://yolindeng.gitee.io/myblog/2020/06/09/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1、数据类型JS分为两种数据类型：基本数组类型： Number、String、Boolean、Null、Undefined、Symbol引用数组类型：Object(JS中除了基本数据类型，其他都是对象。例如数组、函数、正则表达式等) （1）基本数据类型（存放在栈中）基本数据类型是指直接存放在栈中的简单数据段，数据大小确定，内存k空间可分配，按值存放和访问注：栈(stack)和堆（heap）stack为自动分配的内存空间，它由系统自动释放；而heap则是动态分配的内存，大小也不一定会自动释放 （2）引用数据类型（存放在堆内存中的对象）引用数据类型是存放在堆内存里的对象，而指向堆内存值的引用也就是指针是存在栈内存中的。 2、浅拷贝当我们使用对象拷贝时，如果属性是对象或者数组时，我们只是拷贝的数组或对象的引用地址，因此两者的属性值会指向同一个内存空间。实现数组的片浅拷贝使用concat、slice这个两个是技巧类，如何实现一个浅拷贝呢？简单的思路是遍历对象，把属性和属性值都放在一个新的对象中如下： 12345678910111213var shallowCopy = function(obj) &#123; // 只拷贝对象 if (typeof obj !== 'object') return; // 根据obj的类型判断是新建一个数组还是对象 var newObj = obj instanceof Array ? [] : &#123;&#125;; // 遍历obj，并且判断是obj的属性才拷贝 for (var key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; newObj[key] = obj[key]; &#125; &#125; return newObj;&#125; 12345let a = &#123; name: '123', obj: &#123; name: '456' &#125;&#125;const b = shallowCopy(a)b.obj.name = '666'console.log(b) // &#123; name: '123', obj: &#123; name: '666' &#125; &#125;console.log(a) // &#123; name: '123', obj: &#123; name: '666' &#125; &#125; 这样如果改变b中的对象，a中的对象也会同时改变。 3、深拷贝实现数组或对象的深拷贝，可以使用JSON.parse(JSON.stringify(obj))如何手写一个深度拷贝呢？思路是通过递归调用拷贝函数 12345678910var deepCopy = function(obj) &#123; if (typeof obj !== 'object') return var newObj = obj instanceof Array ? [] : &#123;&#125; for (key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; newObj[key] = typeof obj[key] === 'object' ? deepCopy(obj[key]) : obj[key] &#125; &#125; return newObj&#125; 12345let a = &#123; name: '123', obj: &#123; name: '456' &#125;&#125;const b = deepCopy(a)b.obj.name = '666'console.log(b) // &#123; name: '123', obj: &#123; name: '666' &#125; &#125;console.log(a) // &#123; name: '123', obj: &#123; name: '456' &#125; &#125; 这样就实现了深度拷贝，当改变b中对象值时，a没有发生变化。","categories":[{"name":"前端基础","slug":"前端基础","permalink":"http://yolindeng.gitee.io/myblog/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://yolindeng.gitee.io/myblog/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"javaScript","slug":"javaScript","permalink":"http://yolindeng.gitee.io/myblog/tags/javaScript/"}]}],"categories":[{"name":"前端基础","slug":"前端基础","permalink":"http://yolindeng.gitee.io/myblog/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"http://yolindeng.gitee.io/myblog/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"javaScript","slug":"javaScript","permalink":"http://yolindeng.gitee.io/myblog/tags/javaScript/"},{"name":"css","slug":"css","permalink":"http://yolindeng.gitee.io/myblog/tags/css/"}]}