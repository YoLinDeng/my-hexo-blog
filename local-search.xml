<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Proxy实现简易的vue双向数据绑定</title>
    <link href="/myblog/2021/05/21/%E4%BD%BF%E7%94%A8Proxy%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <url>/myblog/2021/05/21/%E4%BD%BF%E7%94%A8Proxy%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>在实现vue双向数据绑定之前，先了解Proxy相关的概念和用法</p><h3 id="proxy概念"><a href="#proxy概念" class="headerlink" title="proxy概念"></a>proxy概念</h3><p><code>Proxy</code> 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h3><ul><li>handle<br>包含捕捉器（trap）的占位符对象，可译为处理器对象</li><li>traps<br>提供属性访问的方法。这类似于操作系统中捕获器的概念。</li><li>target<br>被 Proxy 代理虚拟化的对象。<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><code>const p = new Proxy(target, handler)</code></li><li>target<br>要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li><li>handle<br>一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</li></ul><h3 id="使用proxy实现数据劫持"><a href="#使用proxy实现数据劫持" class="headerlink" title="使用proxy实现数据劫持"></a>使用proxy实现数据劫持</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123;<br>    name: YoLinDeng,<br>    height: <span class="hljs-string">'176cm'</span><br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data, &#123;<br>    <span class="hljs-keyword">get</span>(target, prop) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(...arguments)<br>    &#125;,<br>    <span class="hljs-keyword">set</span>(target, prop, newValue) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(...arguments)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="关于vue中数据响应式的原理"><a href="#关于vue中数据响应式的原理" class="headerlink" title="关于vue中数据响应式的原理"></a>关于vue中数据响应式的原理</h3><h4 id="对数据进行侦测"><a href="#对数据进行侦测" class="headerlink" title="对数据进行侦测"></a>对数据进行侦测</h4><ul><li>在vue2.X中，实现一个<code>observe</code>类，对于对象数据，通过<code>Object.defineProperty</code>来劫持对象的属性，实现<code>getter</code>和<code>setter</code>方法，这样就可以在getter的时候知道谁（订阅者）读取了数据，即谁依赖了当前的数据，将它通过<code>Dep类</code>（订阅器）收集统一管理，在setter的时候调用Dep类中的<code>notify</code>方法通知所以相关的订阅者进行更新视图。如果对象的属性也是一个对象的话，则需要递归调用<code>observe</code>进行处理。</li><li>对于数组则需要另外处理，通过实现一个拦截器类，并将它挂载到数组数据的原型上，当调用<code>push/pop/shift/unshift/splice/sort/reverse</code>修改数组数据时候，相当于调用的是拦截器中重新定义的方法，这样在拦截器中就可以侦测到数据改变了，并通知订阅者更新视图。</li><li>vue3中使用Proxy替代了Object.defineProperty，优点在于可以直接监听对象而非属性、可以直接监听数组的变化、多达13种拦截方法。缺点是兼容性还不够好。Proxy作为新标准将受到浏览器厂商重点持续的性能优化。<h4 id="对模板字符串进行编译"><a href="#对模板字符串进行编译" class="headerlink" title="对模板字符串进行编译"></a>对模板字符串进行编译</h4></li><li>实现Compile解析器类，将<code>template</code>中的模板字符串通过正则等方式进行处理生成对应的ast（抽象语法树），通过调用定义的不同钩子函数进行处理，包括开始标签（<code>start</code>）并判断是否自闭和以及解析属性、结束标签（<code>end</code>）、文本（<code>chars</code>）、注释（<code>comment</code>）</li><li>将通过html解析与文本解析的ast进行优化处理，在静态节点上打标记，为后面<code>dom-diff</code>算法中性能优化使用，即在对比前后vnode的时候会跳过静态节点不作对比。</li><li>最后根据处理好的ast生产<code>render</code>函数，在组件挂载的时候调用<code>render</code>函数就可以得到虚拟dom。<h4 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h4></li><li>vnode的类型包括注释节点、文本节点、元素节点、组件节点、函数式组件节点、克隆节点，<code>VNode</code>可以描述的多种节点类型，它们本质上都是<code>VNode</code>类的实例，只是在实例化的时候传入的属性参数不同而已。</li><li>通过将模板字符串编译生成虚拟dom并缓存起来，当数据发生变化时，通过对比变化前后虚拟dom，以变化后的虚拟dom为基准，更新旧的虚拟dom，使它和新的一样。把dom-diff过程叫做<code>patch</code>的过程，其主要做了三件事，分别是创建/删除/更新节点。</li><li>对于子节点的更新策略，vue中为了避免双重循环数据量大时候造成时间复杂度高带来的性能问题，而选择先从子节点数组中4个特殊位置进行对比，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。如果四种情况都没有找到相同的节点，则再通过循环方式查找。<h3 id="实现简易的vue双向数据绑定"><a href="#实现简易的vue双向数据绑定" class="headerlink" title="实现简易的vue双向数据绑定"></a>实现简易的vue双向数据绑定</h3>vue的双向数据绑定主要是指，数据变化更新视图变化，视图变化更新数据。</li><li><em>实现代码如下*</em><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width= , initial-scale=1.0"</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"myVue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;name&#125;&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"test"</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;test&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    let vm = new vue(&#123;</span><br><span class="xml">      el: '#app',</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        name: 'YoLinDeng',</span><br><span class="xml">        message: '打篮球',</span><br><span class="xml">        test: '双向绑定数据'</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><span class="xml">    // console.log(vm._data)</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">vue</span> <span class="hljs-title">extends</span> <span class="hljs-title">EventTarget</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>(option) &#123;<br>    <span class="hljs-keyword">super</span>()<br>    <span class="hljs-keyword">this</span>.option = option<br>    <span class="hljs-keyword">this</span>._data = <span class="hljs-keyword">this</span>.option.<span class="hljs-keyword">data</span><br>    <span class="hljs-keyword">this</span>.el = document.querySelector(<span class="hljs-keyword">this</span>.option.el)<br>    <span class="hljs-keyword">this</span>.compileNode(<span class="hljs-keyword">this</span>.el)<br>    <span class="hljs-keyword">this</span>.observe(<span class="hljs-keyword">this</span>._data)<br>  &#125;<br>  <span class="hljs-comment">// 实现监听器方法</span><br>  observe(<span class="hljs-keyword">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>    <span class="hljs-comment">// 使用proxy代理，劫持数据</span><br>    <span class="hljs-keyword">this</span>._data = new Proxy(<span class="hljs-keyword">data</span>, &#123;<br>      <span class="hljs-keyword">set</span>(target, prop, newValue) &#123;<br>        <span class="hljs-comment">// 自定义事件</span><br>        let event = new CustomEvent(prop, &#123;<br>          detail: newValue<br>        &#125;)<br>        <span class="hljs-comment">// 发布自定义事件</span><br>        context.dispatchEvent(event) <br>        <span class="hljs-keyword">return</span> Reflect.<span class="hljs-keyword">set</span>(...arguments)<br>      &#125;<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 实现解析器方法，解析模板</span><br>  compileNode(el) &#123;<br>    let child = el.childNodes<br>    let childArr = [...child]<br>    childArr.forEach(node =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (node.nodeType === <span class="hljs-number">3</span>) &#123;<br>        let text = node.textContent<br>        let reg = /\&#123;\&#123;\s*([^\s\&#123;\&#125;]+)\s*\&#125;\&#125;/g<br>        <span class="hljs-keyword">if</span> (reg.test(text)) &#123;<br>          let $<span class="hljs-number">1</span> = RegExp.$<span class="hljs-number">1</span><br>          <span class="hljs-keyword">this</span>._data[$<span class="hljs-number">1</span>] &amp;&amp; (node.textContent = text.replace(reg, <span class="hljs-keyword">this</span>._data[$<span class="hljs-number">1</span>]))<br>          <span class="hljs-comment">// 监听数据更改事件</span><br>          <span class="hljs-keyword">this</span>.addEventListener($<span class="hljs-number">1</span>, e =&gt; &#123;<br>            node.textContent = text.replace(reg, e.detail)<br>          &#125;)<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.nodeType === <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果是元素节点</span><br>        let attr = node.attributes<br>        <span class="hljs-comment">// 判断属性中是否含有v-model</span><br>        <span class="hljs-keyword">if</span> (attr.hasOwnProperty(<span class="hljs-string">'v-model'</span>)) &#123;<br>          let keyName = attr[<span class="hljs-string">'v-model'</span>].nodeValue<br>          node.value = <span class="hljs-keyword">this</span>._data[keyName]<br>          node.addEventListener(<span class="hljs-string">'input'</span>, e =&gt; &#123;<br>            <span class="hljs-keyword">this</span>._data[keyName] = node.value<br>          &#125;)<br>        &#125;<br>        <span class="hljs-comment">// 递归调用解析器方法</span><br>        <span class="hljs-keyword">this</span>.compileNode(node)<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写防抖与节流函数</title>
    <link href="/myblog/2021/05/21/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/"/>
    <url>/myblog/2021/05/21/%E6%89%8B%E5%86%99%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>我们经常会绑定一些持续触发的事件，比如resize、scroll、mousemove等等，如果事件调用无限制，会加重浏览器负担，导致用户体验差，我们可以使用debounce(防抖)和throttle(节流)的方式来减少频繁的调用，同时也不会影响实际的效果。</p><h3 id="防抖的概念"><a href="#防抖的概念" class="headerlink" title="防抖的概念"></a>防抖的概念</h3><p>触发事件后n秒后才执行函数，如果在n秒内触发了事件，则会重新计算函数执行时间<br>防抖函数可以分为立即执行，和非立即执行两个版本</p><ul><li><p>非立即执行版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>        <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span><br>        timer &amp;&amp; clearTimeout(timer)<br>        timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            fn.apply(context, args)   <br>        &#125;, wait)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此函数一开始不会马上执行，而是等到用户操作结束之后等待wait秒后才执行，如果在wait之内用户又触发了事件，则会重新计算</p></li><li><p>立即执行版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span><br>        <span class="hljs-keyword">const</span> now = !timer<br>        timer &amp;&amp; clearTimeout(timer)<br>        timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            timer = <span class="hljs-literal">null</span><br>        &#125;, wait)<br>        <span class="hljs-keyword">if</span> (now) &#123;<br>            fn.apply(<span class="hljs-keyword">this</span>, args)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>立即执行就是触发事件后马上先执行一次，直到用户停止执行事件等待wait秒后再执行一次</p></li></ul><p>我们可以将两种版本合并成一种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc </span>函数防抖</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>fn 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>wait 延迟执行毫秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>immediate true 表立即执行，false 表示非立即执行</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait, immediate</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>        <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span><br>        timer &amp;&amp; clearTimeout(timer)<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-keyword">const</span> now = !timer<br>            timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span><br>            &#125;, wait)<br>            now &amp;&amp; fn.apply(context, args)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                fn.apply(context, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="节流的概念"><a href="#节流的概念" class="headerlink" title="节流的概念"></a>节流的概念</h3><p>连续触发事件但在n秒内只执行一次函数<br>对于节流有时间戳和定时器两种版本</p><ul><li>时间戳版本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> prev = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> now = <span class="hljs-built_in">Date</span>.now()<br>        <span class="hljs-keyword">let</span> context = <span class="hljs-keyword">this</span><br>        <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span><br>        <span class="hljs-keyword">if</span> (now - prev &gt; wait) &#123;<br>            fn.apply(context, args)<br>            prev = now<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>在持续触发事件的过程中，函数会立即执行，用户在wait秒内不管执行多少次事件，都会等待wait秒后再执行。</li><li>定时器版本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>        <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span><br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span><br>                fn.apply(context, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>在触发事件的过程中，不会立即执行，并且每wait秒执行一次，在停止触发事件后还会再执行一次。</li></ul><p>时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</p><p>将两种方式合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc </span>函数节流</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>fn 函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>wait 延迟执行毫秒数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>type 1 表时间戳版，2 表定时器版</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait, type</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (type === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> prev = <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span><br>    &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">this</span><br>        <span class="hljs-keyword">const</span> args = <span class="hljs-built_in">arguments</span><br>         <span class="hljs-keyword">if</span> (type === <span class="hljs-number">2</span>) &#123;<br>             <span class="hljs-keyword">if</span> (!timer) &#123;<br>                 timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                   timer = <span class="hljs-literal">null</span><br>                   fn.apply(context, args) <br>                 &#125;, wait)<br>             &#125;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now()<br>            <span class="hljs-keyword">if</span> (now - prev &gt; wait) &#123;<br>                fn.apply(context, args)<br>                prev = now<br>            &#125;<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p><a href="https://juejin.im/post/6844903651278848014" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>javaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass常用方法</title>
    <link href="/myblog/2021/05/21/sass%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/myblog/2021/05/21/sass%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是sass"><a href="#一、什么是sass" class="headerlink" title="一、什么是sass"></a>一、什么是sass</h3><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，提供了许多便利的写法，大大提高的开发效率。下面总结了SASS的主要用法，想要了解更多可以查阅<a href="https://www.sass.hk/docs/" target="_blank" rel="noopener">文档</a></p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>1、由于sass依赖于Ruby，因此需要先<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">安装Ruby</a>，然后执行<code>gem install sass</code><br>2、若在vue-cli或react-create-app中使用，在项目中安装依赖：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm install <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span> --save-dev<br>npm install sass-loader --save-dev<br></code></pre></td></tr></table></figure><h3 id="三、基础用法"><a href="#三、基础用法" class="headerlink" title="三、基础用法"></a>三、基础用法</h3><h4 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h4><p>SASS允许使用变量，所有变量以$开头</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$color</span>: <span class="hljs-number">#ccc</span>;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果变量需要镶嵌在属性中之中，就必须需要写在#{}之中</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$side</span>: right;<br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>-#&#123;<span class="hljs-variable">$side</span>&#125;-radius: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-计算能力"><a href="#3-2-计算能力" class="headerlink" title="3.2 计算能力"></a>3.2 计算能力</h4><p>SASS允许在代码中使用算式</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$var: <span class="hljs-number">10</span>px;<br>div &#123;<br>  width：(<span class="hljs-number">20</span>px/<span class="hljs-number">2</span>);<br>  top: <span class="hljs-number">10</span>px + <span class="hljs-number">20</span>px;<br>  left: $var * <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-嵌套能力"><a href="#3-3-嵌套能力" class="headerlink" title="3.3 嵌套能力"></a>3.3 嵌套能力</h4><p>一般我们写多个选择器时，一般这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用sass可以写成：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-class">div </span>&#123;<br>  <span class="hljs-class">h2 </span>&#123;<br><span class="hljs-symbol">    border:</span><span class="hljs-number">1</span>px solid <span class="hljs-meta">#ccc;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性也可以嵌套,比如font-size属性，可以写成</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">div</span> &#123;<br>  font：&#123;<br>    <span class="hljs-keyword">size</span>：<span class="hljs-number">18</span>px;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用&amp;引用父元素</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span> &#123;<br> &amp;::<span class="hljs-keyword">after</span> &#123;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、代码重用"><a href="#四、代码重用" class="headerlink" title="四、代码重用"></a>四、代码重用</h3><h4 id="4-1-继承"><a href="#4-1-继承" class="headerlink" title="4.1 继承"></a>4.1 继承</h4><p>SASS允许一个选择器，继承另一个选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class1</span> &#123;<br>   <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要继承class1，需要使用@extend命令</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.class2</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .class1;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-Mixin-混合"><a href="#4-2-Mixin-混合" class="headerlink" title="4.2 Mixin(混合)"></a>4.2 Mixin(混合)</h4><p>使用@mixin声明代码块，达到重用代码块的作用，在需要用的地方使用@include调用</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">mixin</span> right &#123;<br> margin-right: <span class="hljs-number">20</span>px;<br>&#125;<br>div &#123;<br>  @include right;<br>&#125;<br></code></pre></td></tr></table></figure><p>@minxin可以设置参数以及参数默认值</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">mixin</span> left($value: <span class="hljs-number">20</span>px) &#123;<br>  margin-left: $value;<br>&#125;<br>div &#123;<br>  @include left(<span class="hljs-number">10</span>px)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-颜色函数"><a href="#4-3-颜色函数" class="headerlink" title="4.3 颜色函数"></a>4.3 颜色函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">lighten</span><span class="hljs-params">(<span class="hljs-number">#cc3</span>, <span class="hljs-number">10%</span>)</span></span> <span class="hljs-comment">// #d6d65c  </span><br><span class="hljs-function"><span class="hljs-title">darken</span><span class="hljs-params">(<span class="hljs-number">#cc3</span>, <span class="hljs-number">10%</span>)</span></span> <span class="hljs-comment">// #a3a329  </span><br><span class="hljs-function"><span class="hljs-title">grayscale</span><span class="hljs-params">(<span class="hljs-number">#cc3</span>)</span></span> <span class="hljs-comment">// #808080  </span><br><span class="hljs-function"><span class="hljs-title">complement</span><span class="hljs-params">(<span class="hljs-number">#cc3</span>)</span></span> <span class="hljs-comment">// #33c</span><br></code></pre></td></tr></table></figure><h4 id="4-4-引入文件"><a href="#4-4-引入文件" class="headerlink" title="4.4 引入文件"></a>4.4 引入文件</h4><p>使用@import命令，用来引入外部文件<br>@import 文件路径</p><h3 id="五、进阶用法"><a href="#五、进阶用法" class="headerlink" title="五、进阶用法"></a>五、进阶用法</h3><h4 id="5-1-条件语句"><a href="#5-1-条件语句" class="headerlink" title="5.1 条件语句"></a>5.1 条件语句</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-variable">@if</span> computed($width) &gt; <span class="hljs-number">10</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">10%</span> &#125;<br>  <span class="hljs-variable">@if</span> computed($height) &gt; <span class="hljs-number">10</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>  &#125; <span class="hljs-variable">@else</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-循环语句"><a href="#5-2-循环语句" class="headerlink" title="5.2 循环语句"></a>5.2 循环语句</h4><p>for循环:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> to <span class="hljs-number">10</span> &#123;  <br> <span class="hljs-selector-class">.content-</span>#&#123;<span class="hljs-variable">$i</span>&#125; &#123;  <br>    <span class="hljs-attribute">width</span>: #&#123;<span class="hljs-variable">$i</span>&#125;px;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>while循环:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">　<span class="hljs-variable">$x</span>: <span class="hljs-number">6</span>;<br>　　<span class="hljs-keyword">@while</span> <span class="hljs-variable">$x</span> &gt; <span class="hljs-number">0</span> &#123;  <br>　　　　<span class="hljs-selector-class">.item-</span>#&#123;<span class="hljs-variable">$x</span>&#125; &#123; <span class="hljs-attribute">width</span>: <span class="hljs-variable">$x</span> + <span class="hljs-number">10px</span>; &#125;  <br>　　　　<span class="hljs-variable">$x</span>: <span class="hljs-variable">$x</span> - <span class="hljs-number">1</span>;  <br>　　&#125;z<br></code></pre></td></tr></table></figure><p>each:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@each</span> <span class="hljs-variable">$member</span> in a, b, c, d &#123;  <br> .#&#123;<span class="hljs-variable">$member</span>&#125; &#123;  <br>    <span class="hljs-attribute">background-image</span>: url(<span class="hljs-string">"/image/#&#123;$member&#125;.jpg"</span>);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">　<span class="hljs-keyword">@function</span> count($n) &#123;  <br>　　　　<span class="hljs-keyword">@return</span> $n + <span class="hljs-number">1</span>;  <br>　　&#125;<br><br>　　<span class="hljs-selector-tag">div</span> &#123;  <br>　　　　<span class="hljs-attribute">width</span>: <span class="hljs-built_in">count</span>(<span class="hljs-number">5px</span>);  <br>　　&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli中使用svgIcon</title>
    <link href="/myblog/2021/05/21/vue-cli%E4%B8%AD%E4%BD%BF%E7%94%A8svgIcon/"/>
    <url>/myblog/2021/05/21/vue-cli%E4%B8%AD%E4%BD%BF%E7%94%A8svgIcon/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装依赖包"><a href="#一、安装依赖包" class="headerlink" title="一、安装依赖包"></a>一、安装依赖包</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npm install svg-sprite-loader -D<br>或者<br>yarn <span class="hljs-keyword">add</span><span class="bash"> svg-sprite-loader -D</span><br></code></pre></td></tr></table></figure><h3 id="二、配置vue-config-js文件"><a href="#二、配置vue-config-js文件" class="headerlink" title="二、配置vue.config.js文件"></a>二、配置vue.config.js文件</h3><p>在顶部写入</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span> <span class="hljs-params">(dir)</span></span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">path</span>.join(__dirname, dir)<br>&#125;<br></code></pre></td></tr></table></figure><p>在chainWebpack中增加下列配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">chainWebpack</span> (config) &#123;<br>    <span class="hljs-selector-tag">config</span><span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.rule</span>(<span class="hljs-string">'svg'</span>)<br>      <span class="hljs-selector-class">.exclude</span><span class="hljs-selector-class">.add</span>(resolve(<span class="hljs-string">'src/icons'</span>))<br>    <span class="hljs-selector-tag">config</span><span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.rule</span>(<span class="hljs-string">'icons'</span>)<br>      <span class="hljs-selector-class">.test</span>(/\.svg$/)<br>      <span class="hljs-selector-class">.include</span><span class="hljs-selector-class">.add</span>(resolve(<span class="hljs-string">'./src/icons'</span>))<span class="hljs-selector-class">.end</span>()<br>      <span class="hljs-selector-class">.use</span>(<span class="hljs-string">'svg-sprite-loader'</span>)<br>      <span class="hljs-selector-class">.loader</span>(<span class="hljs-string">'svg-sprite-loader'</span>)<br>      <span class="hljs-selector-class">.options</span>(&#123; <span class="hljs-attribute">symbolId</span>: <span class="hljs-string">'icon-[name]'</span> &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="三、实现SvgIcon组件"><a href="#三、实现SvgIcon组件" class="headerlink" title="三、实现SvgIcon组件"></a>三、实现SvgIcon组件</h3><p>组件结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"svgClass"</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">"$listeners"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">:xlink:href</span>=<span class="hljs-string">"iconName"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br>  props: &#123;<br>    iconClass: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="actionscript">      required: <span class="hljs-literal">true</span></span><br>    &#125;,<br>    className: &#123;<br><span class="javascript">      type: <span class="hljs-built_in">String</span>,</span><br><span class="actionscript">      <span class="hljs-keyword">default</span>: <span class="hljs-string">''</span></span><br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    iconName () &#123;<br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-string">`#icon-<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.iconClass&#125;</span>`</span></span><br>    &#125;,<br>    svgClass () &#123;<br><span class="actionscript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.className) &#123;</span><br><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-string">'svg-icon '</span> + <span class="hljs-keyword">this</span>.className</span><br><span class="actionscript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-string">'svg-icon'</span></span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span>&gt;</span><br><span class="css"><span class="hljs-selector-class">.svg-icon</span> &#123;</span><br>  width: 1em;<br>  height: 1em;<br><span class="css">  <span class="hljs-selector-tag">vertical-align</span>: <span class="hljs-selector-tag">-0</span><span class="hljs-selector-class">.15em</span>;</span><br>  fill: currentColor;<br>  overflow: hidden;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四、根目录下创建icons-svg目录"><a href="#四、根目录下创建icons-svg目录" class="headerlink" title="四、根目录下创建icons/svg目录"></a>四、根目录下创建icons/svg目录</h3><p> 用于存放我们所需要用的svg文件</p><h3 id="五、新建plugins目录及index-js文件"><a href="#五、新建plugins目录及index-js文件" class="headerlink" title="五、新建plugins目录及index.js文件"></a>五、新建plugins目录及index.js文件</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> SvgIcon <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/SvgIcon'</span><br><br><span class="hljs-keyword">const</span> req = <span class="hljs-built_in">require</span>.context(<span class="hljs-string">'@/icons/svg'</span>, <span class="hljs-literal">true</span>, <span class="hljs-regexp">/\.svg$/</span>)<br>req.keys().<span class="hljs-keyword">map</span>(req)<br><br>Vue.component(<span class="hljs-string">'svg-icon'</span>, SvgIcon)<br></code></pre></td></tr></table></figure><p>其作用是在Vue实例上创建SvgIcon组件，其中require.context的作用是获取一个特定的上下文,遍历文件夹中的指定文件，主要用来实现自动化导入模块</p><ul><li>最后在main.js中引入plugins, <code>import &#39;@/plugins&#39;</code></li></ul><h3 id="六、SvgIcon-组件的使用"><a href="#六、SvgIcon-组件的使用" class="headerlink" title="六、SvgIcon 组件的使用"></a>六、SvgIcon 组件的使用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs">&lt;svg-icon icon-<span class="hljs-keyword">class</span>=<span class="hljs-string">"icon-name"</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"down"</span>&gt;&lt;/svg-icon&gt;<br></code></pre></td></tr></table></figure><p>其中icon-class为svg文件名， class为类名</p>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>组件化</tag>
      
      <tag>模块化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中组件通信之findComponents</title>
    <link href="/myblog/2021/05/21/vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B9%8BfindComponents/"/>
    <url>/myblog/2021/05/21/vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B9%8BfindComponents/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 向上查找组件 context为当前组件上下文对象，componentName为组件名</span><br><span class="hljs-keyword">const</span> findUpwardComponent = (context, componentName) =&gt; &#123;<br>    let <span class="hljs-keyword">parent</span> = context.$parent<br>    let name = <span class="hljs-keyword">parent</span>.$options.name<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">parent</span> &amp;&amp; (!name || !name.includes(componentName))) &#123;<br>        <span class="hljs-keyword">parent</span> = <span class="hljs-keyword">parent</span>.$parent<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">parent</span>) name = <span class="hljs-keyword">parent</span>.$options.name<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span><br>&#125;<br><br><span class="hljs-comment">// 查找兄弟组件</span><br><span class="hljs-keyword">const</span> findBrotherComponents = (ctx, componentName, exceptMe = <span class="hljs-keyword">true</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> $brothers = ctx.$parent.$children.filter(item =&gt; &#123;<br>        <span class="hljs-keyword">return</span> item.$options.name &amp;&amp; item.$options.name.includes(componentName)<br>    &#125;)<br>    <span class="hljs-keyword">const</span> index = $brothers.findIndex(item =&gt; item._uid === ctx._uid)<br>    <span class="hljs-keyword">if</span> (exceptMe &amp;&amp; index &gt; <span class="hljs-number">-1</span>) $brothers.splice(index, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> $brothers<br>&#125;<br><br><span class="hljs-comment">// 向下查找</span><br><span class="hljs-keyword">const</span> findDownwardComponent = (context, componentName) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> $children = context.$children<br>    let bean = <span class="hljs-keyword">null</span><br>    <span class="hljs-keyword">if</span> ($children.length) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> child of $children) &#123;<br>            <span class="hljs-keyword">const</span> name = child.$options.name<br>            <span class="hljs-keyword">if</span> (name &amp;&amp; name.includes(componentName)) &#123;<br>                bean = child<br>                <span class="hljs-keyword">break</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                bean = findDownwardComponent(child, componentName)<br>                <span class="hljs-keyword">if</span> (bean) <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bean<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scss实现retina屏1px边框</title>
    <link href="/myblog/2021/05/21/scss%E5%AE%9E%E7%8E%B0retina%E5%B1%8F1px%E8%BE%B9%E6%A1%86/"/>
    <url>/myblog/2021/05/21/scss%E5%AE%9E%E7%8E%B0retina%E5%B1%8F1px%E8%BE%B9%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br><span class="hljs-comment">// =======================</span><br><span class="hljs-comment">//  用法：  </span><br><span class="hljs-comment">//  @include retina-border(1,1,1,1);</span><br><span class="hljs-comment">//  数值 代表 各 边框的宽度  上右下左</span><br><span class="hljs-comment">// =======================</span><br><br><br><span class="hljs-keyword">@mixin</span> _border-scale(<span class="hljs-variable">$dpr</span>) &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span> * <span class="hljs-variable">$dpr</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span> * <span class="hljs-variable">$dpr</span>;<br><br>  -webkit-<span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1</span> / <span class="hljs-variable">$dpr</span>);<br>  -webkit-<span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1</span> / <span class="hljs-variable">$dpr</span>);<br>  <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">@mixin</span> _border-base() &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br><br><span class="hljs-keyword">@mixin</span> retina-border(<span class="hljs-variable">$top</span>: <span class="hljs-number">0</span>, <span class="hljs-variable">$right</span>: <span class="hljs-number">0</span>, <span class="hljs-variable">$bottom</span>: <span class="hljs-number">0</span>, <span class="hljs-variable">$left</span>: <span class="hljs-number">0</span>, <span class="hljs-variable">$cor</span>: <span class="hljs-number">#000000</span>) &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br><br>  &amp;<span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">border-top</span>: #&#123;<span class="hljs-variable">$top</span>&#125;px solid <span class="hljs-variable">$cor</span>;<br>    <span class="hljs-attribute">border-right</span>: #&#123;<span class="hljs-variable">$right</span>&#125;px solid <span class="hljs-variable">$cor</span>;<br>    <span class="hljs-attribute">border-bottom</span>: #&#123;<span class="hljs-variable">$bottom</span>&#125;px solid <span class="hljs-variable">$cor</span>;<br>    <span class="hljs-attribute">border-left</span>: #&#123;<span class="hljs-variable">$left</span>&#125;px solid <span class="hljs-variable">$cor</span>;<br><br>    <span class="hljs-keyword">@include</span> _border-base();<br><br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (-webkit-min-device-pixel-ratio: <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">@include</span> _border-scale(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (-webkit-min-device-pixel-ratio: <span class="hljs-number">1.5</span>) &#123;<br>      <span class="hljs-keyword">@include</span> _border-scale(<span class="hljs-number">1.5</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (-webkit-min-device-pixel-ratio: <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">@include</span> _border-scale(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (-webkit-min-device-pixel-ratio: <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">@include</span> _border-scale(<span class="hljs-number">3</span>);<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的git命令操作</title>
    <link href="/myblog/2021/05/21/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
    <url>/myblog/2021/05/21/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在使用git之前需要先安装它<br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载git</a></p><p>以windows系统为例子，安装完成后，鼠标右键点击桌面，出现Git Bash Here和 Git GUI Here 说明安装成功。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">""</span>  <br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">""</span><br></code></pre></td></tr></table></figure><h4 id="克隆远程仓库与代码提交"><a href="#克隆远程仓库与代码提交" class="headerlink" title="克隆远程仓库与代码提交"></a>克隆远程仓库与代码提交</h4><p>1、在github上新建项目new repositories后，复制https地址或ssh<br>2、在相应的目录，右键选择 git bash here 进入 git操作界面<br>3、输入 git clone “复制的仓库地址”<br>4、对仓库内存进行修改<br>5、cd 文件夹名称（进入文件夹）<br>6、git add .（或git add –all）<br>7、git commit -m “需要写的提交说明”<br>8、git push</p><p>其中git add . 与git add –all的区别是:<br>（1）.git add –all可以提交未跟踪、修改和删除文件。<br>（2）.git add .可以提交未跟踪和修改文件，但是不处理删除文件。</p><h4 id="创建新的分支"><a href="#创建新的分支" class="headerlink" title="创建新的分支"></a>创建新的分支</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b </span>分支名称 （创建并切换至该分支）<br></code></pre></td></tr></table></figure><p>注：新建的分支第一次push： git push -u origin 分支名</p><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git branch<span class="hljs-comment"> // 本地分支</span><br>git branch -<span class="hljs-keyword">a</span><span class="hljs-comment"> // 所以分支,包括线上</span><br></code></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git branch -D 分支名 <span class="hljs-comment">// 删除本地分支</span><br>git <span class="hljs-keyword">push</span> origin --<span class="hljs-keyword">delete</span> 分支名 <span class="hljs-comment">// 删除远程分支</span><br></code></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 分支名<br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>、先切换到<span class="hljs-literal">master</span>分支 git checkout <span class="hljs-literal">master</span><br><br><span class="hljs-number">2</span>、拉取最新代码 git pull<br><br><span class="hljs-number">3</span>、切换到自己的分支 并将<span class="hljs-literal">master</span>分支与自己的分支合并，然后解决冲突<br><br>git merge <span class="hljs-keyword">master</span> <span class="hljs-title">解决完冲突后，git</span> add --all git commit -m<span class="hljs-string">""</span><br><br>git fetch origin <span class="hljs-literal">master</span>// 虚拟的更新远程的<span class="hljs-literal">master</span><br><br>git merge origin/<span class="hljs-keyword">master</span> <span class="hljs-title">//合并远程master</span><br><br>git push 推到自己的远程分支<br><br><span class="hljs-number">4</span>、切换到 <span class="hljs-keyword">master</span> <span class="hljs-title">分支</span><br><span class="hljs-title"></span><br><span class="hljs-title">5</span>、将自己的分子合并到<span class="hljs-keyword">master</span> <span class="hljs-title">分支</span><br><span class="hljs-title"></span><br><span class="hljs-title">git</span> merge 分支名<br></code></pre></td></tr></table></figure><h4 id="跟踪到远程名字相同的分支"><a href="#跟踪到远程名字相同的分支" class="headerlink" title="跟踪到远程名字相同的分支"></a>跟踪到远程名字相同的分支</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">git branch --<span class="hljs-keyword">set</span>-upstream-<span class="hljs-keyword">to</span>=origin/分支名 分支名<br></code></pre></td></tr></table></figure><h4 id="将更改加入暂存区"><a href="#将更改加入暂存区" class="headerlink" title="将更改加入暂存区"></a>将更改加入暂存区</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git stash <span class="hljs-built_in">save</span> <span class="hljs-string">"描述信息"</span><br><br>git stash list : 显示保存列表。<br><br>git stash <span class="hljs-built_in">pop</span>  恢复最近保存的记录并把恢复的记录从保存列表中删除<br></code></pre></td></tr></table></figure><h4 id="查看与生成公钥"><a href="#查看与生成公钥" class="headerlink" title="查看与生成公钥"></a>查看与生成公钥</h4><p>进入该目录并列出其中内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br><br><span class="hljs-keyword">ls</span><br><br>cat id_rsa.pub <span class="hljs-string">//</span> 查看公钥<br></code></pre></td></tr></table></figure><p>设置邮箱与用户名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">""</span><br><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">""</span><br></code></pre></td></tr></table></figure><p>清理之前的公钥</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mkdir</span> <span class="hljs-string">key_backup</span><br><br><span class="hljs-attr">cp</span> <span class="hljs-string">id_rsa* key_backup</span><br><br><span class="hljs-attr">rm</span> <span class="hljs-string">id_rsa*</span><br></code></pre></td></tr></table></figure><p>生成</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ssh-keygen -t rsa -C <span class="hljs-string">"邮箱号"</span> <span class="hljs-comment">// C是大写</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">cat</span> <span class="hljs-selector-tag">id_rsa</span><span class="hljs-selector-class">.pub</span><br></code></pre></td></tr></table></figure><h4 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h4><p>查看版本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">log</span> -<span class="hljs-built_in">num</span><span class="hljs-comment"> // num: 版本数量</span><br></code></pre></td></tr></table></figure><p>回滚到指定的版本</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">git reset --hard<span class="hljs-built_in"> id</span> //<span class="hljs-built_in"> id</span>: 版<span class="hljs-built_in">本id</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中实现倒计时组件与毫秒效果</title>
    <link href="/myblog/2021/05/21/vue%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E7%BB%84%E4%BB%B6%E4%B8%8E%E6%AF%AB%E7%A7%92%E6%95%88%E6%9E%9C/"/>
    <url>/myblog/2021/05/21/vue%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6%E7%BB%84%E4%BB%B6%E4%B8%8E%E6%AF%AB%E7%A7%92%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="时分秒倒计时组件"><a href="#时分秒倒计时组件" class="headerlink" title="时分秒倒计时组件"></a>时分秒倒计时组件</h3><h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 倒计时组件 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"downTime-wrapper"</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 这里是显示还未结束时的内容，这里只是我这得布局，你可以随意。 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"time"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"!isShow"</span>&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- &lt;span class="hour"&gt;</span></span><span class="hljs-template-variable">&#123;&#123;myDay&#125;&#125;</span><span class="xml"><span class="hljs-comment">&lt;/span&gt; : --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hour"</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getHours1 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getHours2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dian"</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"minute"</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getMinutes1 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getMinutes2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dian"</span>&gt;</span>:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"second"</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getSeconds1 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; getSeconds2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 这里是显示结束后的内容 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"second"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;clocker&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;script&gt;<br>export <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">'downTime'</span>,<br><br>  props: &#123; <span class="hljs-comment">// 接收父组件传递过来的参数,这里传了  结束时间 - 开始时间 - 结束后显示的内容</span><br>    endTime: &#123;<br>      type: Number<br>    &#125;,<br>    startTime: &#123;<br>      type: Number<br>    &#125;,<br>    endMsg: &#123;<br>      type: String<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-keyword">data</span> () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      isShow: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 控制显示结束或还未结束显示的内容</span><br>      clocker: <span class="hljs-string">''</span>, <span class="hljs-comment">// 结束后显示的内容</span><br>      timeObj: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 时间对象,下方会用到</span><br>      myDay: <span class="hljs-number">0</span>, <span class="hljs-comment">// 我定义来接收计算出来的 天 的</span><br>      myHours: <span class="hljs-number">0</span>, <span class="hljs-comment">// 我定义来接收计算出来的 小时 的</span><br>      myMinutes: <span class="hljs-number">0</span>, <span class="hljs-comment">// 我定义来接收计算出来的 分钟 的</span><br>      mySeconds: <span class="hljs-number">0</span><span class="hljs-comment">// 我定义来接收计算出来的 秒钟 的</span><br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    getHours1 () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.myHours &lt; <span class="hljs-number">10</span> ? <span class="hljs-number">0</span> : parseInt((<span class="hljs-keyword">this</span>.myHours % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>)<br>    &#125;,<br>    getHours2 () &#123;<br>      <span class="hljs-keyword">return</span> parseInt(<span class="hljs-keyword">this</span>.myHours % <span class="hljs-number">10</span>)<br>    &#125;,<br>    getMinutes1 () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.myMinutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-number">0</span> : parseInt((<span class="hljs-keyword">this</span>.myMinutes % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>)<br>    &#125;,<br>    getMinutes2 () &#123;<br>      <span class="hljs-keyword">return</span> parseInt(<span class="hljs-keyword">this</span>.myMinutes % <span class="hljs-number">10</span>)<br>    &#125;,<br>    getSeconds1 () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.mySeconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-number">0</span> : parseInt((<span class="hljs-keyword">this</span>.mySeconds % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>)<br>    &#125;,<br>    getSeconds2 () &#123;<br>      <span class="hljs-keyword">return</span> parseInt(<span class="hljs-keyword">this</span>.mySeconds % <span class="hljs-number">10</span>)<br>    &#125;<br>  &#125;,<br>  mounted () &#123;<br>  &#125;,<br>  methods: &#123;<br>    option () &#123;<br>      <span class="hljs-comment">// 计算时间差</span><br>      let timeLag = (<span class="hljs-keyword">this</span>.endTime - <span class="hljs-keyword">this</span>.startTime) / <span class="hljs-number">1000</span><br>      <span class="hljs-comment">// 判断当前是否时分秒的值是否大于10</span><br>      <span class="hljs-keyword">const</span> add = num =&gt; &#123;<br>        <span class="hljs-keyword">return</span> num &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + num : num<br>      &#125;<br>      <span class="hljs-comment">// 时间倒计时运算的方法</span><br>      <span class="hljs-keyword">const</span> timeFunction = () =&gt; &#123;<br>        <span class="hljs-keyword">const</span> time = timeLag--<br>        <span class="hljs-keyword">this</span>.timeObj = &#123; <span class="hljs-comment">// 时间对象</span><br>          seconds: Math.floor(time % <span class="hljs-number">60</span>),<br>          minutes: Math.floor(time / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>,<br>          hours: Math.floor(time / <span class="hljs-number">60</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>,<br>          days: Math.floor(time / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>)<br>        &#125;<br>        <span class="hljs-comment">// 计算出时分秒</span><br>        <span class="hljs-keyword">this</span>.myDay = `$&#123;add(<span class="hljs-keyword">this</span>.timeObj.days)&#125;`<br>        <span class="hljs-keyword">this</span>.myHours = `$&#123;add(<span class="hljs-keyword">this</span>.timeObj.hours)&#125;`<br>        <span class="hljs-keyword">this</span>.myMinutes = `$&#123;add(<span class="hljs-keyword">this</span>.timeObj.minutes)&#125;`<br>        <span class="hljs-keyword">this</span>.mySeconds = `$&#123;add(<span class="hljs-keyword">this</span>.timeObj.seconds)&#125;`<br>        <span class="hljs-comment">// 当时间差小于等于0时,停止倒计时</span><br>        <span class="hljs-keyword">if</span> (time &lt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">this</span>.isShow = <span class="hljs-literal">true</span><br>          <span class="hljs-keyword">this</span>.clocker = <span class="hljs-keyword">this</span>.endMsg<br>          clearInterval(go)<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 开始执行倒计时</span><br>      timeFunction()<br>      <span class="hljs-comment">// 每一秒执行一次</span><br>      <span class="hljs-keyword">const</span> go = setInterval(() =&gt; &#123;<br>        timeFunction()<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br>  &#125;,<br>    watch: &#123;<br>        endTime: &#123;<br>          handler (newName, oldName) &#123;<br>            <span class="hljs-keyword">this</span>.option()<br>          &#125;,<br>          immediate: <span class="hljs-literal">true</span>,<br>          deep: <span class="hljs-literal">true</span><br>        &#125;<br>     &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>备注：我将时分秒使用计算属性分成了个位和十位两部分展示，在watch中深度监听endTime属性的变化并重新调用定时器</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;style lang=<span class="hljs-string">"scss"</span> scoped&gt;<br>.downTime-wrapper&#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-selector-class">.dian</span> &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>  &#125;<br>  .hour&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;<br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">6px</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>      <span class="hljs-attribute">background</span>:rgba(<span class="hljs-number">27</span>,<span class="hljs-number">23</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>);<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;<br>    &#125;<br>  &#125;<br>  .minute&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;<br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">6px</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>      <span class="hljs-attribute">background</span>:rgba(<span class="hljs-number">27</span>,<span class="hljs-number">23</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>);<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-class">.second</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;<br>    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">5px</span>;<br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">6px</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>      <span class="hljs-attribute">background</span>:rgba(<span class="hljs-number">27</span>,<span class="hljs-number">23</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>);<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在页面中引入并注册后即可使用</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;timer<br>  <span class="hljs-symbol">:endTime=<span class="hljs-string">"item.endTime"</span></span><br>  <span class="hljs-symbol">:startTime=<span class="hljs-string">"new Date().getTime()"</span></span><br>  <span class="hljs-symbol">:endMsg=<span class="hljs-string">"item.endMsg"</span>&gt;</span><br>&lt;<span class="hljs-regexp">/timer&gt;</span><br></code></pre></td></tr></table></figure><h3 id="毫秒倒计时效果"><a href="#毫秒倒计时效果" class="headerlink" title="毫秒倒计时效果"></a>毫秒倒计时效果</h3><p>在template中加入<br><code>&lt;b id=&quot;timehs&quot;&gt;:00&lt;/b&gt;</code></p><p>声明timeDt方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>    timeDt () &#123;<br>      <span class="hljs-keyword">this</span>.timer1 = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> haomiao = <span class="hljs-number">99</span><br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'timehs'</span>).innerHTML = <span class="hljs-string">':'</span> + haomiao<br>        <span class="hljs-keyword">this</span>.timer2 = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">const</span> timehs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'timehs'</span>)<br>          <span class="hljs-keyword">if</span> (timehs) &#123;<br>            timehs.innerHTML = <span class="hljs-string">`:<span class="hljs-subst">$&#123;haomiao &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">`0<span class="hljs-subst">$&#123;haomiao&#125;</span>`</span> : haomiao&#125;</span>`</span><br>          &#125;<br>          haomiao--<br>          <span class="hljs-keyword">if</span> (haomiao &lt; <span class="hljs-number">0</span>) &#123;<br>            haomiao = <span class="hljs-number">99</span><br>          &#125;<br>        &#125;, <span class="hljs-number">10</span>)<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>在create生命周期函数中调用timeDt方法</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">created () &#123;<br>    <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">this</span>.timeDt()<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>组件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongoose在egg中的运用</title>
    <link href="/myblog/2021/05/21/Mongoose%E5%9C%A8egg%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <url>/myblog/2021/05/21/Mongoose%E5%9C%A8egg%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Mongoose是什么？"><a href="#Mongoose是什么？" class="headerlink" title="Mongoose是什么？"></a>Mongoose是什么？</h3><p>Mongoose是MongoDB的一个对象模型工具，封装了许多MongoDB对文档的的增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。<br>###在egg项目中如何使用？</p><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p><code>npm i egg-mongoose --save</code></p><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>在根目录下的/config/plugin.js中配置插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">exports</span>.mongoose = &#123;<br>  enable: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-keyword">package</span>: <span class="hljs-string">'egg-mongoose'</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3、连接数据库"><a href="#3、连接数据库" class="headerlink" title="3、连接数据库"></a>3、连接数据库</h4><p>在根目录下的/config/config.default.js增加配置，其中url为我们的数据库地址，可通过环境变量来区分开发环境还是生产环境，并且确定是否使用用户名密码的数据库<br><code>const prod = process.env.npm_config_server_prod;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">mongoose</span>: &#123;<br>      <span class="hljs-attribute">client</span>: &#123;<br>        <span class="hljs-attribute">url</span>: prod ? <span class="hljs-string">'mongodb:eggadmin:123456@localhost:27017/DbName'</span> : <span class="hljs-string">'mongodb://127.0.0.1:27017/DbName'</span>,<br>        <span class="hljs-attribute">options</span>: &#123;<br>          <span class="hljs-attribute">useUnifiedTopology</span>: true,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br></code></pre></td></tr></table></figure><h4 id="4、配置与使用"><a href="#4、配置与使用" class="headerlink" title="4、配置与使用"></a>4、配置与使用</h4><h5 id="（1）数据表配置"><a href="#（1）数据表配置" class="headerlink" title="（1）数据表配置"></a>（1）数据表配置</h5><p>在app目录下新建model文件夹，在model文件夹下新建JS文件作为数据表的配置内容，下面以书籍表的配置为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">'use strict'</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: Mongoose book Schema,</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> mongoose = app.mongoose;<br>  <span class="hljs-keyword">const</span> Schema = mongoose.Schema;<br>  <span class="hljs-keyword">const</span> BookSchema = <span class="hljs-keyword">new</span> Schema(&#123;<br>    desc: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 书籍描述 */</span><br>    name: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 书籍名称 */</span><br>    press: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 出版社 */</span><br>    author: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 作者 */</span><br>    image: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">Array</span> &#125;, <span class="hljs-comment">/* 书籍图片列表*/</span><br>    price: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 价格 */</span><br>    book_type: &#123; <span class="hljs-comment">/* 书籍分类id */</span><br>      <span class="hljs-keyword">type</span>: Schema.Types.ObjectId,<br>      ref: <span class="hljs-string">'BookClassify'</span>,<br>    &#125;,<br>    user: &#123; <span class="hljs-comment">/* 书籍发布者id */</span><br>      <span class="hljs-keyword">type</span>: Schema.Types.ObjectId,<br>      ref: <span class="hljs-string">'User'</span>,<br>    &#125;,<br>    create_time: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 创建时间 */</span><br>    status: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 状态，1：待购买，2：已购买*/</span><br>    look: &#123; <span class="hljs-keyword">type</span>: <span class="hljs-built_in">Number</span> &#125; <span class="hljs-comment">/* 浏览数量 */</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> mongoose.model(<span class="hljs-string">'Book'</span>, BookSchema);<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到我们可以通过Schema来定义表结构，可以指定字段的类型及关联，设置完字段后就可以生成model了，这里算是非常简单的配置，更多配置方法可参考<a href="https://mongoosejs.com/docs/guide.html" target="_blank" rel="noopener">文档</a></p><h5 id="2-、使用mongoose方法"><a href="#2-、使用mongoose方法" class="headerlink" title="(2)、使用mongoose方法"></a>(2)、使用mongoose方法</h5><p>配置完数据表结构后，我们就可以再service层中调用mongoose的方法对文档进行增删查改了，已书籍列表的处理逻辑为例子</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stata">async findbookList(data) &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">type</span>, page, pageSize, <span class="hljs-keyword">desc</span>, status, userId &#125; = data;<br>  <span class="hljs-keyword">const</span> searchVal = &#123;&#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span>) &#123;<br>    searchVal.book_type = mongoose.Types.ObjectId(<span class="hljs-keyword">type</span>)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (status) &#123;<br>    searchVal.status = status<br>  &#125;<br>  <span class="hljs-keyword">if</span> (userId) &#123;<br>    searchVal.user = mongoose.Types.ObjectId(userId)<br>  &#125;<br>  <span class="hljs-keyword">const</span> search_term = &#123;<br>    <span class="hljs-variable">$or</span>: [<br>      &#123; <span class="hljs-keyword">desc</span>: &#123; <span class="hljs-variable">$regex</span>: <span class="hljs-keyword">desc</span> ? <span class="hljs-keyword">desc</span> : '', <span class="hljs-variable">$options</span>: '<span class="hljs-variable">$i</span>' &#125; &#125;,<br>      &#123; name: &#123; <span class="hljs-variable">$regex</span>: <span class="hljs-keyword">desc</span> ? <span class="hljs-keyword">desc</span> : '', <span class="hljs-variable">$options</span>: '<span class="hljs-variable">$i</span>' &#125; &#125;,<br>      &#123; author: &#123; <span class="hljs-variable">$regex</span>: <span class="hljs-keyword">desc</span> ? <span class="hljs-keyword">desc</span> : '', <span class="hljs-variable">$options</span>: '<span class="hljs-variable">$i</span>' &#125; &#125;,<br>      &#123; press: &#123; <span class="hljs-variable">$regex</span>: <span class="hljs-keyword">desc</span> ? <span class="hljs-keyword">desc</span> : '', <span class="hljs-variable">$options</span>: '<span class="hljs-variable">$i</span>' &#125; &#125;,<br>    ],<br>  &#125;;<br>  <span class="hljs-keyword">const</span> totalNum = await this.ctx.model.Book.find(searchVal).and(search_term).countDocuments();<br>  <span class="hljs-keyword">const</span> result = await this.ctx.model.Book.find(searchVal)<br>    .populate(&#123;<br>      path: 'user',<br>      select: &#123; name: 1, image: 1 &#125;<br>    &#125;)<br>    .populate(&#123;<br>      path: 'book_type'<br>    &#125;)<br>    .and(search_term)<br>    .<span class="hljs-keyword">sort</span>(&#123; create_time: -1 &#125;)<br>    .skip((parseInt(page) - 1) * parseInt(pageSize))<br>    .limit(parseInt(pageSize));<br>    <span class="hljs-keyword">return</span> result ? &#123; bean: &#123;<br>      records: result,<br>      current: page,<br>      size: result.length,<br>      <span class="hljs-keyword">total</span>: totalNum,<br>    &#125;, ...<span class="hljs-keyword">app</span>.config.msg.GET_SUCCESS &#125; : <span class="hljs-keyword">app</span>.config.msg.GET_ERR;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，通过this.ctx.model.Book就可以获取到Book的model并且可以调用mongoose需要的方法，例如populate、find、and、sort、skip、limit 等等。</p><h4 id="5、egg-Mongoose常用的方法"><a href="#5、egg-Mongoose常用的方法" class="headerlink" title="5、egg-Mongoose常用的方法"></a>5、egg-Mongoose常用的方法</h4><h5 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.create</span>(<span class="hljs-selector-tag">data</span>,<span class="hljs-selector-tag">callback</span>);<br></code></pre></td></tr></table></figure><p>其中data为json数据结构，callback为操作后的回调函数</p><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><h6 id="获取所有数据，返回是一个数组"><a href="#获取所有数据，返回是一个数组" class="headerlink" title="获取所有数据，返回是一个数组"></a>获取所有数据，返回是一个数组</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.find</span>()<br></code></pre></td></tr></table></figure><h6 id="获取一个数据，返回是一个对象"><a href="#获取一个数据，返回是一个对象" class="headerlink" title="获取一个数据，返回是一个对象"></a>获取一个数据，返回是一个对象</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.findOne</span>()<br></code></pre></td></tr></table></figure><h6 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Article</span><span class="hljs-selector-class">.find</span>(<span class="hljs-selector-tag">conditions</span>,<span class="hljs-selector-tag">callback</span>);<br></code></pre></td></tr></table></figure><p>其中conditions为查询的条件，callback为回调函数<br>conditions有一下几种情况：</p><p> 具体数据：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">this.ctx.model.Book.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-variable">_id</span>：<span class="hljs-number">5</span>c4a19fb87ba4002a47ac4d, <span class="hljs-built_in">name</span>: <span class="hljs-string">"射雕英雄传"</span> &#125;, callback);<br></code></pre></td></tr></table></figure><p>条件查询：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-string">"<span class="hljs-variable">$lt</span>"</span>小于<br><span class="hljs-string">"<span class="hljs-variable">$lte</span>"</span>小于等于<br><span class="hljs-string">"<span class="hljs-variable">$gt</span>"</span>大于<br><span class="hljs-string">"<span class="hljs-variable">$gte</span>"</span>大于等于<br><span class="hljs-string">"<span class="hljs-variable">$ne</span>"</span>不等于<br><span class="hljs-comment">// 查询价格大于100小于200的书籍数组</span><br><span class="hljs-keyword">this</span>.ctx.model.Book.find(&#123; <span class="hljs-string">"price"</span>: &#123; $<span class="hljs-keyword">get</span>:<span class="hljs-number">100</span> , $lte:<span class="hljs-number">200</span> &#125;);<br></code></pre></td></tr></table></figure><p>或查询 OR</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">"<span class="hljs-variable">$in</span>"</span> 一个键对应多个值<br><span class="hljs-string">"<span class="hljs-variable">$nin</span>"</span> 同上取反, 一个键不对应指定值<br><span class="hljs-string">"<span class="hljs-variable">$or</span>"</span> 多个条件匹配, 可以嵌套 <span class="hljs-variable">$in</span> 使用<br><span class="hljs-string">"<span class="hljs-variable">$not</span>"</span>同上取反, 查询与特定模式不匹配的文档<br><br>this.ctx.model.Book.<span class="hljs-builtin-name">find</span>(&#123;<span class="hljs-string">"name"</span>:&#123; <span class="hljs-variable">$in</span>: [<span class="hljs-string">"射雕"</span>,<span class="hljs-string">"倚天"</span>]&#125; );<br></code></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.remove</span>(<span class="hljs-selector-tag">conditions</span>,<span class="hljs-selector-tag">callback</span>);<br></code></pre></td></tr></table></figure><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.update</span>(<span class="hljs-selector-tag">conditions</span>, <span class="hljs-selector-tag">update</span>, <span class="hljs-selector-tag">callback</span>)<br></code></pre></td></tr></table></figure><p>conditions为条件，update是更新的值对象</p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.sort</span>(&#123; <span class="hljs-attribute">create_time</span>: -<span class="hljs-number">1</span> &#125;);<br></code></pre></td></tr></table></figure><p>其中-1表示降序返回。 1表示升序返回</p><h5 id="限制数量"><a href="#限制数量" class="headerlink" title="限制数量"></a>限制数量</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.limit</span>(<span class="hljs-selector-tag">number</span>);<br></code></pre></td></tr></table></figure><p>number表示限制的个数</p><h5 id="跳过文档返回"><a href="#跳过文档返回" class="headerlink" title="跳过文档返回"></a>跳过文档返回</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.skip</span>(<span class="hljs-selector-tag">number</span>);<br></code></pre></td></tr></table></figure><p>number表示跳过的个数,skip经常搭配limit实现分页的功能</p><h5 id="条件数组and"><a href="#条件数组and" class="headerlink" title="条件数组and"></a>条件数组and</h5><p>在find后面可使用and对查询结果进行进一步条件筛选，相当于并且的意思。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">const search_term = &#123;<br><span class="hljs-symbol">        $or:</span> [<br>          &#123; <span class="hljs-string">desc:</span> &#123; <span class="hljs-string">$regex:</span> desc ? desc : <span class="hljs-string">''</span>, <span class="hljs-string">$options:</span> <span class="hljs-string">'$i'</span> &#125; &#125;,<br>          &#123; <span class="hljs-string">name:</span> &#123; <span class="hljs-string">$regex:</span> desc ? desc : <span class="hljs-string">''</span>, <span class="hljs-string">$options:</span> <span class="hljs-string">'$i'</span> &#125; &#125;,<br>          &#123; <span class="hljs-string">author:</span> &#123; <span class="hljs-string">$regex:</span> desc ? desc : <span class="hljs-string">''</span>, <span class="hljs-string">$options:</span> <span class="hljs-string">'$i'</span> &#125; &#125;,<br>          &#123; <span class="hljs-string">press:</span> &#123; <span class="hljs-string">$regex:</span> desc ? desc : <span class="hljs-string">''</span>, <span class="hljs-string">$options:</span> <span class="hljs-string">'$i'</span> &#125; &#125;,<br>        ],<br>      &#125;;<br>   <span class="hljs-keyword">this</span>.ctx.model.Book.find().and(search_term)<br></code></pre></td></tr></table></figure><h5 id="关联查询populate"><a href="#关联查询populate" class="headerlink" title="关联查询populate"></a>关联查询populate</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 在model中配置字段时候指定关联的表名，就可以通过populate来进行表的关联查询</span><br><span class="hljs-attribute">user</span>: &#123; <span class="hljs-comment">/* 书籍发布者id */</span><br>      <span class="hljs-attribute">type</span>: Schema.Types.ObjectId,<br>      <span class="hljs-attribute">ref</span>: <span class="hljs-string">'User'</span>,<br>    &#125;,<br>  <br>  <br><span class="hljs-selector-tag">this</span><span class="hljs-selector-class">.ctx</span><span class="hljs-selector-class">.model</span><span class="hljs-selector-class">.Book</span><span class="hljs-selector-class">.find</span>()<br>        <span class="hljs-selector-class">.populate</span>(&#123;<br>          <span class="hljs-attribute">path</span>: <span class="hljs-string">'user'</span>,<br>          <span class="hljs-attribute">select</span>: &#123; <span class="hljs-attribute">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attribute">image</span>: <span class="hljs-number">1</span> &#125;<br>        &#125;)<br></code></pre></td></tr></table></figure><h5 id="聚合管道Aggregate"><a href="#聚合管道Aggregate" class="headerlink" title="聚合管道Aggregate"></a>聚合管道Aggregate</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">this</span>.ctx.model.Template.aggregate([<br>        &#123; <span class="hljs-string">$match:</span> &#123; name &#125; &#125;,<br>        &#123; <span class="hljs-string">$sort:</span> &#123; <span class="hljs-string">create_time:</span> <span class="hljs-number">-1</span> &#125; &#125;,<br>        &#123; <span class="hljs-string">$group:</span> &#123; <span class="hljs-string">_id:</span> <span class="hljs-string">'$name'</span>, <span class="hljs-string">user_id:</span> &#123; <span class="hljs-string">$first:</span> <span class="hljs-string">'$modifier'</span> &#125; &#125; &#125;,<br>      ]);<br></code></pre></td></tr></table></figure><p>Mongoose聚合管道aggregate常用的操作有$project 、$match 、$group、$sort、$limit、$skip、$lookup 表关联</p><h4 id="批量操作bulkWrite"><a href="#批量操作bulkWrite" class="headerlink" title="批量操作bulkWrite"></a>批量操作bulkWrite</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy">const template_list = await ctx.model.Template.aggregate([<br>     &#123; <span class="hljs-string">$sort:</span> &#123; <span class="hljs-string">create_time:</span> <span class="hljs-number">-1</span> &#125; &#125;,<br>     &#123; <span class="hljs-string">$group:</span> &#123; <span class="hljs-string">_id:</span> <span class="hljs-string">'$name'</span>, <span class="hljs-string">template_id:</span> &#123; <span class="hljs-string">$first:</span> <span class="hljs-string">'$_id'</span> &#125;, <span class="hljs-string">label:</span> &#123; <span class="hljs-string">$first:</span> <span class="hljs-string">'$label'</span> &#125; &#125; &#125;,<br>   ]);<br>   const update_value = [];<br>   template_list.forEach(item =&gt; &#123;<br>     <span class="hljs-keyword">if</span> (!item.label) &#123;<br>       update_value.push(&#123;<br><span class="hljs-symbol">         updateOne:</span> &#123;<br><span class="hljs-symbol">           filter:</span> &#123; <span class="hljs-string">_id:</span> item.template_id &#125;,<br><span class="hljs-symbol">           update:</span> &#123; <span class="hljs-string">label:</span> <span class="hljs-string">''</span> &#125;,<br>         &#125;,<br>       &#125;);<br>     &#125;<br>   &#125;);<br>   await ctx.model.Template.bulkWrite(update_value);<br></code></pre></td></tr></table></figure><p>可以进行一系列批量增加、删除、更新等操作。</p><p>mongoose还有非常多的方法可以提供给我的灵活使用，我们在使用的时候可以结合业务逻辑选择合适的方法来提高我们操作数据库的效率。在我们使用它之前可以认真的阅读<a href="https://mongoosejs.com/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>mongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>egg.js+mongoose实现二级评论</title>
    <link href="/myblog/2021/05/21/egg-js-mongoose%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E8%AF%84%E8%AE%BA/"/>
    <url>/myblog/2021/05/21/egg-js-mongoose%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>1、首先我们先在model目录下新建comment.js文件，这里使用<strong>egg-mongoose</strong>进行配置表以及字段，这里关键需要parent_id作为父级字段，若默认为0则是第一级评论，如果为id，则是二级评论。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">'use strict'</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Mongoose comment Schema,</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> mongoose = app.mongoose;<br>  <span class="hljs-keyword">const</span> Schema = mongoose.Schema;<br>  <span class="hljs-keyword">const</span> CommentSchema = <span class="hljs-keyword">new</span> Schema(&#123;<br>    <span class="hljs-keyword">from</span>: &#123; <span class="hljs-comment">/* 评论人id */</span><br>      type: Schema.Types.ObjectId,<br>      ref: <span class="hljs-string">'User'</span>,<br>    &#125;,<br>    to: &#123; <span class="hljs-comment">/* 被评论人id */</span><br>      type: Schema.Types.ObjectId,<br>      ref: <span class="hljs-string">'User'</span>,<br>    &#125;,<br>    content: &#123; <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 内容 */</span><br>    create_time: &#123; <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span> &#125;, <span class="hljs-comment">/* 评论时间 */</span><br>    book: &#123; <span class="hljs-comment">/* 书籍id */</span><br>      type: Schema.Types.ObjectId,<br>      ref: <span class="hljs-string">'Book'</span>,<br>    &#125;,<br>    parent_id: &#123; <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">default</span>: <span class="hljs-number">0</span> &#125; <span class="hljs-comment">/* 父级 */</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> mongoose.model(<span class="hljs-string">'Comment'</span>, CommentSchema);<br>&#125;;<br></code></pre></td></tr></table></figure><p>2、在controller 目录下新建comment.js 用于编写 评论相关的控制器方法，这里我定义了新增评论和查询评论，使用<strong>egg-validate</strong>进行请求参数验证如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">'use strict'</span>;<br><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg'</span>).Controller;<br><span class="hljs-comment">// 定义新增评论请求参数规则</span><br><span class="hljs-keyword">const</span> createCommentRule = &#123;<br>  <span class="hljs-keyword">from</span>: <span class="hljs-string">'string'</span>,<br>  to: &#123;<br>    type: <span class="hljs-string">'string'</span>,<br>    required: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  content: <span class="hljs-string">'string'</span>,<br>  book: <span class="hljs-string">'string'</span>,<br>  parentId: &#123;<br>    type: <span class="hljs-string">'string'</span>,<br>    required: <span class="hljs-literal">false</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-comment">// 定义查询评论请求参数规则</span><br><span class="hljs-keyword">const</span> findCommentRule = &#123;<br>  book: <span class="hljs-string">'string'</span>,<br>  page: <span class="hljs-string">'string'</span>,<br>  pageSize: <span class="hljs-string">'string'</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> create() &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-keyword">this</span>;<br>    ctx.validate(createCommentRule, ctx.request.body);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ctx.service.comment.createComment(ctx.request.body);<br>    ctx.body = result;<br>  &#125;<br>  <span class="hljs-keyword">async</span> find() &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-keyword">this</span>;<br>    ctx.validate(findCommentRule, ctx.query);<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ctx.service.comment.findComment(ctx.query);<br>    ctx.body = result;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = CommentController;<br></code></pre></td></tr></table></figure><p>在对应的控制器方法调用service层里面的方法，在service的方法进行数据库操作与逻辑处理。</p><p>3、在service目录下新建comment.js用于编写评论相关service方法。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">'use strict'</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 评论相关Service</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> Service = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg'</span>).Service;<br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mongoose'</span>);<br><span class="hljs-keyword">const</span> dayjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'dayjs'</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增评论</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;Object&#125;</span> </span>data 包括评论人id，被评论人id，书籍id， 评论父级id，评论内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span> createComment(data) &#123;<br>      <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">from</span>, to, content, book, parentId &#125; = data;<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ctx.model.Comment.create(&#123;<br>        <span class="hljs-keyword">from</span>,<br>        to,<br>        content,<br>        book,<br>        parent_id: parentId ? mongoose.Types.ObjectId(parentId) : <span class="hljs-number">0</span>,<br>        create_time: dayjs().unix(),<br>      &#125;);<br>      <span class="hljs-keyword">return</span> result ? app.config.msg.CREARE_SUCCESS : app.config.msg.CREARE_ERR;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询评论</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;Object&#125;</span> </span>data 包括书籍id，页码，页数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span> findComment(data) &#123;<br>      <span class="hljs-keyword">const</span> &#123; book, page, pageSize &#125; = data<br>      <span class="hljs-keyword">const</span> totalNum = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ctx.model.Comment.find(&#123; <span class="hljs-attr">book</span>: mongoose.Types.ObjectId(book), <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span> &#125;).countDocuments();<br>      <span class="hljs-keyword">const</span> oneList = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.ctx.model.Comment.find(&#123; <span class="hljs-attr">book</span>: mongoose.Types.ObjectId(book), <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span> &#125;)<br>        .populate(&#123;<br>          path: <span class="hljs-string">'from'</span>,<br>          select: &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">image</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span>: <span class="hljs-number">1</span> &#125;<br>        &#125;)<br>        .populate(&#123;<br>          path: <span class="hljs-string">'to'</span>,<br>          select: &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">image</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span>: <span class="hljs-number">1</span> &#125;<br>        &#125;)<br>        .sort(&#123; <span class="hljs-attr">create_time</span>: <span class="hljs-number">1</span>&#125;)<br>        .skip((<span class="hljs-built_in">parseInt</span>(page) - <span class="hljs-number">1</span>) * <span class="hljs-built_in">parseInt</span>(pageSize))<br>        .limit(<span class="hljs-built_in">parseInt</span>(pageSize)).lean();<br>        <span class="hljs-keyword">const</span> Comment = <span class="hljs-keyword">this</span>.ctx.model.Comment<br>        <span class="hljs-keyword">var</span> promises = oneList.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> Comment.find(&#123;<br>              book: mongoose.Types.ObjectId(book),<br>              parent_id: item._id<br>          &#125;)<br>          .populate(&#123;<br>            path: <span class="hljs-string">'from'</span>,<br>            select: &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">image</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span>: <span class="hljs-number">1</span> &#125;<br>          &#125;)<br>          .populate(&#123;<br>            path: <span class="hljs-string">'to'</span>,<br>            select: &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">image</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span>: <span class="hljs-number">1</span> &#125;<br>          &#125;)<br>          .sort(&#123; <span class="hljs-attr">create_time</span>: <span class="hljs-number">1</span>&#125;)<br>          .select(<span class="hljs-string">'-__v'</span>).lean()<br>      &#125;);<br>      <span class="hljs-keyword">var</span> list = <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(promises)<br>      oneList.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        item.items = []<br>        list.forEach(<span class="hljs-function"><span class="hljs-params">code</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (code.length &gt; <span class="hljs-number">0</span> &amp;&amp; item._id == code[<span class="hljs-number">0</span>].parent_id) &#123;<br>              item.items = code<br>          &#125;<br>        &#125;)<br>      &#125;)<br>      <span class="hljs-keyword">return</span> oneList ? &#123; <span class="hljs-attr">bean</span>: &#123;<br>        records: oneList,<br>        current: page,<br>        size: oneList.length,<br>        total: totalNum,<br>      &#125;, ...app.config.msg.GET_SUCCESS &#125; : app.config.msg.GET_ERR;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> CommentService;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注：首先我们需要查询一级评论的分页数据，然后用map遍历一级评论列表，返回一个promises数组，数组的每一项是查询该一级评论下的所有二级评论，我这里没有进行分页，也可以加上分页。使用Promise.all异步执行所有的查询函数，完成后的结果赋值为list，最后遍历一级评论列表与二级评论列表，当一级评论id 等于 二级评论列表中parent_id时候 给当前一级评论列表增加 items属性用于存放它的二级评论。</p><p>最后在router.js中定义接口路径与请求类型，如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// 新建评论</span><br>router.post(<span class="hljs-string">'/api/comment/create'</span>, controller.<span class="hljs-built_in">comment</span>.create);<br><span class="hljs-comment">// 查询评论</span><br>router.get(<span class="hljs-string">'/api/comment/find'</span>, controller.<span class="hljs-built_in">comment</span>.<span class="hljs-built_in">find</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>mongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目使用axios拦截器封装api</title>
    <link href="/myblog/2021/05/21/%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8axios%E6%8B%A6%E6%88%AA%E5%99%A8%E5%B0%81%E8%A3%85api/"/>
    <url>/myblog/2021/05/21/%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8axios%E6%8B%A6%E6%88%AA%E5%99%A8%E5%B0%81%E8%A3%85api/</url>
    
    <content type="html"><![CDATA[<p>在api目录下新建一个http.js，实现代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> Qs <span class="hljs-keyword">from</span> <span class="hljs-string">'qs'</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'@/store'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> utils <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils'</span> <span class="hljs-comment">//工具类</span><br><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'mand-mobile'</span><br><br><span class="hljs-keyword">const</span> instance = axios.create(&#123;<br>  baseURL: <span class="hljs-string">''</span>, <span class="hljs-comment">// 后端接口根目录</span><br>  message: <span class="hljs-literal">true</span><br>&#125;)<br><br><span class="hljs-comment">// 错误控制</span><br><span class="hljs-keyword">const</span> errorHandle = <span class="hljs-function">(<span class="hljs-params">status, message</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">switch</span> (status) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>      <span class="hljs-comment">// store.dispatch('logout')</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">default</span>:<br>      Toast.failed(message)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// axios请求拦截器</span><br><span class="hljs-comment">/* 拦截器一般做什么？</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　　　1. 修改请求头的一些配置项</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　　　2. 给请求的过程添加一些请求的图标</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">　　　　3. 给请求添加参数 */</span><br>instance<br>  .interceptors<br>  .request<br>  .use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = utils.env !== <span class="hljs-string">'dev'</span> ? store.state.auth.token : <span class="hljs-string">''</span><br>    token &amp;&amp; (config.headers.common.token = token)<br>    <span class="hljs-keyword">if</span> (config.method === <span class="hljs-string">'post'</span> &amp;&amp; config.data) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(config.data) !== <span class="hljs-string">'[object FormData]'</span>) &#123;<br>        config.data = Qs.stringify(config.data)<br>      &#125;<br>      config.headers.common[<span class="hljs-string">'Content-Type'</span>] = <span class="hljs-string">'multipart/form-data'</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;)<br><span class="hljs-comment">// 响应拦截器，接受响应接口后的统一处理</span><br>instance<br>  .interceptors<br>  .response<br>  .use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    response.success = response.data.success<br>    <span class="hljs-keyword">if</span> (response.config.message) &#123;<br>      <span class="hljs-keyword">if</span> (!response.success) &#123;<br>        response.data.message &amp;&amp; Toast.failed(response.data.message)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        response.config.method === <span class="hljs-string">'post'</span> &amp;&amp; Toast.succeed(response.data.message || <span class="hljs-string">'操作成功'</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> response<br>  &#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; response &#125; = error<br>    response<br>      ? errorHandle(response.status, response.data.message || <span class="hljs-string">'网络连接失败，请稍后重试！'</span>)<br>      : Toast.info(<span class="hljs-string">'网络连接失败，请稍后重试！'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createAPI = <span class="hljs-function">(<span class="hljs-params">url, method, params, config = &#123;&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (method === <span class="hljs-string">'get'</span>) &#123;<br>    config.params = params<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    config.data = params<br>  &#125;<br>  <span class="hljs-keyword">return</span> instance(&#123;<br>    url,<br>    method,<br>    ...config<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance<br></code></pre></td></tr></table></figure><p>配置接口方式：<br>在api目录下新建个index.js<br><code>import { createAPI } from &#39;./http&#39;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>&#123;<br>  wxOuth: params =&gt; createAPI(<span class="hljs-string">'/wechat/getOauthUrl'</span>, <span class="hljs-string">'get'</span>, params)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后在我们的vue组件中引入即可 <code>import * as api from &#39;@/api&#39;</code><br>调用方式为： api.wxOuth(params).then(res=&gt; {}).catch(err =&gt; {})</p>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web端的微信支付可分为JSAPI与H5</title>
    <link href="/myblog/2021/05/21/web%E7%AB%AF%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%8F%AF%E5%88%86%E4%B8%BAJSAPI%E4%B8%8EH5/"/>
    <url>/myblog/2021/05/21/web%E7%AB%AF%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%8F%AF%E5%88%86%E4%B8%BAJSAPI%E4%B8%8EH5/</url>
    
    <content type="html"><![CDATA[<h3 id="web端的微信支付可分为JSAPI与H5"><a href="#web端的微信支付可分为JSAPI与H5" class="headerlink" title="web端的微信支付可分为JSAPI与H5"></a>web端的微信支付可分为JSAPI与H5</h3><p>JSAPI使用场景为微信内部，而H5支付则是使用在非微信下的外部浏览器。</p><h4 id="1-JSAPI"><a href="#1-JSAPI" class="headerlink" title="1.JSAPI"></a>1.JSAPI</h4><p>在微信内部可以直接唤起微信浏览器的内置对象<code>WeixinJSBridge</code><br>废话不多说直接上代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-comment">// 调用后端接口拿到JSAPI支付所需参数，我在beforeRouteEnter的时候调用。</span><br>api.apply.jsApiPay(obj).then(res =&gt; &#123;<br>          <span class="hljs-keyword">if</span> (res.data.code === <span class="hljs-string">'0000'</span>) &#123;<br>            vm.<span class="hljs-keyword">params</span> = res.data.bean<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            alert(<span class="hljs-string">'微信支付调起失败！'</span>)<br>          &#125;<br>        &#125;).<span class="hljs-keyword">catch</span>(err =&gt; &#123;<br>          alert(err)<br>        &#125;)<br><br><span class="hljs-comment">// 点击支付时候调用</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> WeixinJSBridge === <span class="hljs-string">'undefined'</span>) &#123;<br>        <span class="hljs-keyword">if</span> (document.addEventListener) &#123;<br>          document.addEventListener(<span class="hljs-string">'WeixinJSBridgeReady'</span>, <span class="hljs-keyword">this</span>.onBridgeReady(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">params</span>), <span class="hljs-literal">false</span>)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (document.attachEvent) &#123;<br>          document.attachEvent(<span class="hljs-string">'WeixinJSBridgeReady'</span>, <span class="hljs-keyword">this</span>.onBridgeReady(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">params</span>))<br>          document.attachEvent(<span class="hljs-string">'onWeixinJSBridgeReady'</span>, <span class="hljs-keyword">this</span>.onBridgeReady(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">params</span>))<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.onBridgeReady(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">params</span>)<br>      &#125;<br><br><br>onBridgeReady (<span class="hljs-keyword">params</span>) &#123;<br>      <span class="hljs-keyword">const</span> that = <span class="hljs-keyword">this</span><br>      WeixinJSBridge.invoke(<br>        <span class="hljs-string">'getBrandWCPayRequest'</span>,<br>        &#123;<br>          appId: <span class="hljs-keyword">params</span>.appId, <span class="hljs-comment">// 公众号名称，由商户传入</span><br>          timeStamp: <span class="hljs-keyword">params</span>.timeStamp, <span class="hljs-comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span><br>          nonceStr: <span class="hljs-keyword">params</span>.nonceStr, <span class="hljs-comment">// 支付签名随机串，不长于 32 位</span><br>          package: <span class="hljs-keyword">params</span>.prepay_id, <span class="hljs-comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\*\*\*）</span><br>          signType: <span class="hljs-keyword">params</span>.signType, <span class="hljs-comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span><br>          paySign: <span class="hljs-keyword">params</span>.paySign <span class="hljs-comment">// 支付签名</span><br>        &#125;,<br>        function (res) &#123;<br>          <span class="hljs-keyword">if</span> (res.err_msg === <span class="hljs-string">'get_brand_wcpay_request:ok'</span>) &#123;<br>            that.queryOrder() <span class="hljs-comment">// 这里是查询订单是否支付完成，然后执行成功和失败的业务逻辑</span><br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.err_msg === <span class="hljs-string">'get_brand_wcpay_request:fail'</span>) &#123;<br>            alert(<span class="hljs-string">'支付失败！'</span>)<br>          &#125;<br>        &#125;<br>      )<br>    &#125;,<br></code></pre></td></tr></table></figure><p>在微信支付的回调函数中，当res.err_msg 为<br>get_brand_wcpay_request:ok 时，支付状态不一定准确，因此需要调用后端的查询订单接口，查询是否支付完成，然后再执行相应的逻辑。</p><h4 id="2、H5支付"><a href="#2、H5支付" class="headerlink" title="2、H5支付"></a>2、H5支付</h4><p>h5相对简单，前端只需要跳转到后端返回的链接即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">api.apply.h5Pay(&#123;<br>            title: <span class="hljs-string">''</span><br>            orderNum: <span class="hljs-string">''</span>,<br>            expireMinute: <span class="hljs-number">10</span>,<br>            redirectUrl: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">window</span>.location.origin&#125;</span>/pay/card?orderId=<span class="hljs-subst">$&#123;vm.orderId&#125;</span>`</span><br>          &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            vm.h5PayUrl = res.data.bean<br>            <span class="hljs-comment">// 查询订单</span><br>          &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            alert(err)<br>          &#125;)<br></code></pre></td></tr></table></figure><p>第一步，请求后端接口，需要传支付的标题，订单号，支付时间，重定向链接。</p><p>第二部，们只需要点击支付按钮时候跳转至后端返回链接即可。<br><code>window.location.href = this.h5PayUrl</code><br>需要注意的是H5支付查询订单需要用户去手动触发，因此需要增加一个确定订单的弹层。如图：<br><img src="https://i.ibb.co/PYzh0ZC/confirm-pay-layer.png" alt="image.png"><br>查询订单是否支付成功与JSAPI一致~</p>]]></content>
    
    
    <categories>
      
      <category>日常开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javaScript</tag>
      
      <tag>微信体系</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端日常开发常用技巧与方法</title>
    <link href="/myblog/2020/06/09/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <url>/myblog/2020/06/09/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h4 id="盒子边倾斜"><a href="#盒子边倾斜" class="headerlink" title="盒子边倾斜"></a>盒子边倾斜</h4><p>clip-path: polygon(12% 0, 100% 0, 100% 100%, 0 100%);</p><h4 id="禁止点击事件-鼠标事件“穿透”"><a href="#禁止点击事件-鼠标事件“穿透”" class="headerlink" title="禁止点击事件/鼠标事件“穿透”"></a>禁止点击事件/鼠标事件“穿透”</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> * &#123;<br>    <span class="hljs-attribute">pointer-events</span>: none;   <span class="hljs-comment">/*链接啊，点击事件啊，都没有效果了*/</span> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用来控制元素在移动设备上使用滚动回弹效果"><a href="#用来控制元素在移动设备上使用滚动回弹效果" class="headerlink" title="用来控制元素在移动设备上使用滚动回弹效果"></a>用来控制元素在移动设备上使用滚动回弹效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main</span>&#123;<br>    <span class="hljs-attribute">-webkit-overflow-scrolling</span>: touch;<br>&#125;<br></code></pre></td></tr></table></figure><p>可解决在IOS中使用overflow:auto 形成的滚动条，滚动不流畅的情况</p><h4 id="文字渐变效果"><a href="#文字渐变效果" class="headerlink" title="文字渐变效果"></a>文字渐变效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text-gradient</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, deeppink, deepskyblue);<br>    <span class="hljs-attribute">-webkit-background-clip</span>: text;<br>    <span class="hljs-attribute">color</span>: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="css三角形"><a href="#css三角形" class="headerlink" title="css三角形"></a>css三角形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-up</span> &#123;<br><br> <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br><br> <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br><br> <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br><br> <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br><br> <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid red;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h4 id="JavaScript中检测数组的方法"><a href="#JavaScript中检测数组的方法" class="headerlink" title="JavaScript中检测数组的方法"></a>JavaScript中检测数组的方法</h4><p>(1)、typeof操作符</p><p>这种方法对一些常用的类型检查没有问题，但对array和null 都判断为object<br>(2)、instanceof操作符</p><p>这个操作符是检测对象的原型链是否指向构造函数的prototype对象的<br>(3)、对象的constructor属性</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">const</span> arr = []<br><br>console.log(arr<span class="hljs-function">.<span class="hljs-keyword">constructor</span> === <span class="hljs-title">Array</span>) <span class="hljs-comment">// true</span></span><br></code></pre></td></tr></table></figure><p>(4)、Object.prototype.toString</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> arr = []<br><br>console.<span class="hljs-built_in">log</span>(Object.prototype.toString.<span class="hljs-built_in">call</span>(arr) === <span class="hljs-string">'[object Array]'</span>) // <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>(5)、Array.isArray()</p><h4 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h4><ol><li>字符串转化toString()</li><li>字符串分隔split()</li><li>字符串替换replace()</li><li>获取长度length</li><li>查询子字符串 indexOf</li><li>返回指定位置的字符串或字符串编码 charAt charCodeAt</li><li>字符串匹配 match</li><li>字符串拼接concat</li><li>字符串的切割或提取slice() substring() substr()</li><li>字符串大小写转化 toLowerCase toUpperCase</li><li>字符串去空格 trim() 用来删除字符串前后的空格</li></ol><p>其中第9中三者的区别如下：<br>（1）slice(), 参数可以是负数，负数表示从字符串最后一个位置开始切割到对应结束位置<br>（2）substring()，参数不可为负数，切割第一个位置到第二个位置的字符串<br>（3）substr()， 参数不可为负数，第一个参数是开始位置，第二个参数为切割的长度<br>字符串去重<br>const str = ‘11122223333’<br>const arr = str.split(‘’)<br>const uniqueStr = […new Set(arr)].join(‘’)</p><h4 id="常用的数组操作"><a href="#常用的数组操作" class="headerlink" title="常用的数组操作"></a>常用的数组操作</h4><p>1、Array.map()<br>此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组<br>2、Array.forEach()<br>此方法是将数组中的每个元素执行传进提供的函数，没有返回值，注意和map方法区分<br>3、Array.filter()<br>此方法是将满足条件的元素作为一个新数组返回<br>4、Array.every()<br>此方法将数组所有元素进行判断返回一个布尔值，如果所有元素都符合判断条件，则返回true，否则返回false<br>5、Array.some()<br>此方法将数组所有元素进行判断返回一个布尔值,如果有一个元素满足判断条件，则返回true，所有元素都不满足则返回false<br>6、Array.reduce()<br>此方法为所有元素调用返回函数<br>7、Array.push()<br>在数组最后面添加新元素<br>8、Array.shift()<br>删除数组第一个元素<br>9、Array.pop()<br>删除数组最后一个元素<br>10、Array.unshift()<br>在数组最前面增加元素<br>11、Array.isArray()<br>判断是否为一个数组<br>12、Array.concat()<br>数组拼接<br>13、Array.toString()<br>数组转化为字符串<br>14、Array.join()<br>数组转化为字符串，并用第一个参数作为连接符<br>15、Array.splice(开始位置，删除个数，元素)<br>####常用对象方法<br>1、Object.assign()<br>用于克隆，两个参数，将第二个对象分配到第一个中<br>2、Object.is()<br>用于判断两个值是否相同<br>//注意，该函数与==运算符不同，不会强制转换任何类型， 应该更加类似于===，但值得注意的是它会将+0和-0视作不同值<br>3、Object.keys()<br>用于返回对象可枚举的属性和方法的名称，返回一个属性或方法名称的字符串数组。<br>4、Object.defineProperty()<br>劫持变量的set和get方法,将属性添加到对象，或修改现有属性的特性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>Object.defineProperty(a, <span class="hljs-string">'name'</span>, &#123;<br>    <span class="hljs-keyword">value</span> : <span class="hljs-string">'kong'</span>,<br>    enumerable : <span class="hljs-literal">true</span> <span class="hljs-comment">//该属性是否可枚举</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>5、Object.defineProperties()<br>可添加多个属性,与Object.defineProperty()对应,<br>6、isPrototypeOf</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> a();<br><span class="hljs-built_in">console</span>.log(a.prototype.isPrototypeOf(b));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="安卓监听可视区域变化，让输入框移动至可视区域"><a href="#安卓监听可视区域变化，让输入框移动至可视区域" class="headerlink" title="安卓监听可视区域变化，让输入框移动至可视区域"></a>安卓监听可视区域变化，让输入框移动至可视区域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/Android/gi</span>.test(navigator.userAgent)) &#123;<br>          <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.activeElement.tagName === <span class="hljs-string">'INPUT'</span> || <span class="hljs-built_in">document</span>.activeElement.tagName === <span class="hljs-string">'TEXTAREA'</span>) &#123;<br>              <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">document</span>.activeElement.scrollIntoViewIfNeeded();<br>              &#125;, <span class="hljs-number">0</span>);<br>            &#125;<br>          &#125;);<br>        &#125;;<br></code></pre></td></tr></table></figure><h4 id="vue中平滑滚动到某个位置"><a href="#vue中平滑滚动到某个位置" class="headerlink" title="vue中平滑滚动到某个位置"></a>vue中平滑滚动到某个位置</h4><p>this.$refs.rule.scrollIntoView({ block: ‘start’, behavior: ‘smooth’ })</p><h4 id="好用的JavaSrcipt库与模块（包）"><a href="#好用的JavaSrcipt库与模块（包）" class="headerlink" title="好用的JavaSrcipt库与模块（包）"></a>好用的JavaSrcipt库与模块（包）</h4><h5 id="日期时间处理库"><a href="#日期时间处理库" class="headerlink" title="日期时间处理库"></a>日期时间处理库</h5><p>1、<a href="http://momentjs.cn/" target="_blank" rel="noopener">monent.js</a><br>2、<a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener">day.js</a><br>day相对于monent要轻量许多</p><h5 id="高精度数学运算"><a href="#高精度数学运算" class="headerlink" title="高精度数学运算"></a>高精度数学运算</h5><p><a href="https://developer.aliyun.com/mirror/npm/package/number-precision" target="_blank" rel="noopener">number-precision</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>strip(num)         <span class="hljs-comment">// strip a number to nearest right number</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>plus(num1, num2, num3, ...)   <span class="hljs-comment">// addition, num + num2 + num3, two numbers is required at least.</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>minus(num1, num2, num3, ...)  <span class="hljs-comment">// subtraction, num1 - num2 - num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>times(num1, num2, num3, ...)  <span class="hljs-comment">// multiplication, num1 * num2 * num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>divide(num1, num2, num3, ...) <span class="hljs-comment">// division, num1 / num2 / num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>round(num, ratio)  <span class="hljs-comment">// round a number based on ratio</span><br></code></pre></td></tr></table></figure><h5 id="实用工具库"><a href="#实用工具库" class="headerlink" title="实用工具库"></a>实用工具库</h5><p><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a><br>lodash 是一个 JavaScript 实用工具库，提供一致性，及模块化、性能和配件等功能。<br>Lodash 消除了处理数组的麻烦，从而简化了 JavaScript、 数字、对象、字符串等</p>]]></content>
    
    
    <categories>
      
      <category>前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>javaScript</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS的数据类型及深浅拷贝介绍</title>
    <link href="/myblog/2020/06/09/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%8B%E7%BB%8D/"/>
    <url>/myblog/2020/06/09/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><p>JS分为两种数据类型：<br><strong>基本数组类型</strong>： Number、String、Boolean、Null、Undefined、Symbol<br><strong>引用数组类型</strong>：Object(JS中除了基本数据类型，其他都是对象。例如数组、函数、正则表达式等)</p><h5 id="（1）基本数据类型（存放在栈中）"><a href="#（1）基本数据类型（存放在栈中）" class="headerlink" title="（1）基本数据类型（存放在栈中）"></a>（1）基本数据类型（存放在栈中）</h5><p>基本数据类型是指直接存放在栈中的简单数据段，数据大小确定，内存k空间可分配，按值存放和访问<br><strong>注：栈(stack)和堆（heap）</strong><br>stack为自动分配的内存空间，它由系统自动释放；而heap则是动态分配的内存，大小也不一定会自动释放</p><h5 id="（2）引用数据类型（存放在堆内存中的对象）"><a href="#（2）引用数据类型（存放在堆内存中的对象）" class="headerlink" title="（2）引用数据类型（存放在堆内存中的对象）"></a>（2）引用数据类型（存放在堆内存中的对象）</h5><p>引用数据类型是存放在堆内存里的对象，而指向堆内存值的引用也就是指针是存在栈内存中的。</p><h3 id="2、浅拷贝"><a href="#2、浅拷贝" class="headerlink" title="2、浅拷贝"></a>2、浅拷贝</h3><p>当我们使用对象拷贝时，如果属性是对象或者数组时，我们只是拷贝的数组或对象的引用地址，因此两者的属性值会指向同一个内存空间。实现数组的片浅拷贝使用concat、slice<br>这个两个是技巧类，如何实现一个浅拷贝呢？简单的思路是遍历对象，把属性和属性值都放在一个新的对象中<br>如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> shallowCopy = <span class="hljs-function"><span class="hljs-keyword">function</span></span>(obj) &#123;<br>  <span class="hljs-comment">// 只拷贝对象</span><br>  <span class="hljs-keyword">if</span> (typeof obj !== <span class="hljs-string">'object'</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 根据obj的类型判断是新建一个数组还是对象</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = obj instanceof <span class="hljs-keyword">Array</span> ? [] : <span class="hljs-type"></span>&#123;&#125;;<br>  <span class="hljs-comment">// 遍历obj，并且判断是obj的属性才拷贝</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>          <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[key] = obj[key];<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let a = &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125;&#125;<br>const b = shallowCopy(a)<br>b.obj.name = <span class="hljs-string">'666'</span><br>console.log(b) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br>console.log(a) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p>这样如果改变b中的对象，a中的对象也会同时改变。</p><h3 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h3><p>实现数组或对象的深拷贝，可以使用JSON.parse(JSON.stringify(obj))<br>如何手写一个深度拷贝呢？思路是通过递归调用拷贝函数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> deepCopy = <span class="hljs-function"><span class="hljs-keyword">function</span></span>(obj) &#123;<br>  <span class="hljs-keyword">if</span> (typeof obj !== <span class="hljs-string">'object'</span>) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = obj instanceof <span class="hljs-keyword">Array</span> ? [] : <span class="hljs-type"></span>&#123;&#125;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>      <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[key] = typeof obj[key] === <span class="hljs-string">'object'</span> ? deepCopy(obj[key]) : <span class="hljs-type">obj</span>[key]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br><span class="hljs-type"></span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let a = &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125;&#125;<br>const b = deepCopy(a)<br>b.obj.name = <span class="hljs-string">'666'</span><br>console.log(b) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br>console.log(a) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p>这样就实现了深度拷贝，当改变b中对象值时，a没有发生变化。</p>]]></content>
    
    
    <categories>
      
      <category>前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>javaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
