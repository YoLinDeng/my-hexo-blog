<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端日常开发常用技巧与方法</title>
    <link href="/myblog/2020/06/09/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <url>/myblog/2020/06/09/%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h4 id="盒子边倾斜"><a href="#盒子边倾斜" class="headerlink" title="盒子边倾斜"></a>盒子边倾斜</h4><p>clip-path: polygon(12% 0, 100% 0, 100% 100%, 0 100%);</p><h4 id="禁止点击事件-鼠标事件“穿透”"><a href="#禁止点击事件-鼠标事件“穿透”" class="headerlink" title="禁止点击事件/鼠标事件“穿透”"></a>禁止点击事件/鼠标事件“穿透”</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> * &#123;<br>    <span class="hljs-attribute">pointer-events</span>: none;   <span class="hljs-comment">/*链接啊，点击事件啊，都没有效果了*/</span> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用来控制元素在移动设备上使用滚动回弹效果"><a href="#用来控制元素在移动设备上使用滚动回弹效果" class="headerlink" title="用来控制元素在移动设备上使用滚动回弹效果"></a>用来控制元素在移动设备上使用滚动回弹效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main</span>&#123;<br>    <span class="hljs-attribute">-webkit-overflow-scrolling</span>: touch;<br>&#125;<br></code></pre></td></tr></table></figure><p>可解决在IOS中使用overflow:auto 形成的滚动条，滚动不流畅的情况</p><h4 id="文字渐变效果"><a href="#文字渐变效果" class="headerlink" title="文字渐变效果"></a>文字渐变效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text-gradient</span>&#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>, deeppink, deepskyblue);<br>    <span class="hljs-attribute">-webkit-background-clip</span>: text;<br>    <span class="hljs-attribute">color</span>: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="css三角形"><a href="#css三角形" class="headerlink" title="css三角形"></a>css三角形</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-up</span> &#123;<br><br> <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br><br> <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br><br> <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br><br> <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br><br> <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid red;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h4 id="JavaScript中检测数组的方法"><a href="#JavaScript中检测数组的方法" class="headerlink" title="JavaScript中检测数组的方法"></a>JavaScript中检测数组的方法</h4><p>(1)、typeof操作符</p><p>这种方法对一些常用的类型检查没有问题，但对array和null 都判断为object<br>(2)、instanceof操作符</p><p>这个操作符是检测对象的原型链是否指向构造函数的prototype对象的<br>(3)、对象的constructor属性</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">const</span> arr = []<br><br>console.log(arr<span class="hljs-function">.<span class="hljs-keyword">constructor</span> === <span class="hljs-title">Array</span>) <span class="hljs-comment">// true</span></span><br></code></pre></td></tr></table></figure><p>(4)、Object.prototype.toString</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> arr = []<br><br>console.<span class="hljs-built_in">log</span>(Object.prototype.toString.<span class="hljs-built_in">call</span>(arr) === <span class="hljs-string">'[object Array]'</span>) // <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>(5)、Array.isArray()</p><h4 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h4><ol><li>字符串转化toString()</li><li>字符串分隔split()</li><li>字符串替换replace()</li><li>获取长度length</li><li>查询子字符串 indexOf</li><li>返回指定位置的字符串或字符串编码 charAt charCodeAt</li><li>字符串匹配 match</li><li>字符串拼接concat</li><li>字符串的切割或提取slice() substring() substr()</li><li>字符串大小写转化 toLowerCase toUpperCase</li><li>字符串去空格 trim() 用来删除字符串前后的空格</li></ol><p>其中第9中三者的区别如下：<br>（1）slice(), 参数可以是负数，负数表示从字符串最后一个位置开始切割到对应结束位置<br>（2）substring()，参数不可为负数，切割第一个位置到第二个位置的字符串<br>（3）substr()， 参数不可为负数，第一个参数是开始位置，第二个参数为切割的长度<br>字符串去重<br>const str = ‘11122223333’<br>const arr = str.split(‘’)<br>const uniqueStr = […new Set(arr)].join(‘’)</p><h4 id="常用的数组操作"><a href="#常用的数组操作" class="headerlink" title="常用的数组操作"></a>常用的数组操作</h4><p>1、Array.map()<br>此方法是将数组中的每个元素调用一个提供的函数，结果作为一个新的数组返回，并没有改变原来的数组<br>2、Array.forEach()<br>此方法是将数组中的每个元素执行传进提供的函数，没有返回值，注意和map方法区分<br>3、Array.filter()<br>此方法是将满足条件的元素作为一个新数组返回<br>4、Array.every()<br>此方法将数组所有元素进行判断返回一个布尔值，如果所有元素都符合判断条件，则返回true，否则返回false<br>5、Array.some()<br>此方法将数组所有元素进行判断返回一个布尔值,如果有一个元素满足判断条件，则返回true，所有元素都不满足则返回false<br>6、Array.reduce()<br>此方法为所有元素调用返回函数<br>7、Array.push()<br>在数组最后面添加新元素<br>8、Array.shift()<br>删除数组第一个元素<br>9、Array.pop()<br>删除数组最后一个元素<br>10、Array.unshift()<br>在数组最前面增加元素<br>11、Array.isArray()<br>判断是否为一个数组<br>12、Array.concat()<br>数组拼接<br>13、Array.toString()<br>数组转化为字符串<br>14、Array.join()<br>数组转化为字符串，并用第一个参数作为连接符<br>15、Array.splice(开始位置，删除个数，元素)<br>####常用对象方法<br>1、Object.assign()<br>用于克隆，两个参数，将第二个对象分配到第一个中<br>2、Object.is()<br>用于判断两个值是否相同<br>//注意，该函数与==运算符不同，不会强制转换任何类型， 应该更加类似于===，但值得注意的是它会将+0和-0视作不同值<br>3、Object.keys()<br>用于返回对象可枚举的属性和方法的名称，返回一个属性或方法名称的字符串数组。<br>4、Object.defineProperty()<br>劫持变量的set和get方法,将属性添加到对象，或修改现有属性的特性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>Object.defineProperty(a, <span class="hljs-string">'name'</span>, &#123;<br>    <span class="hljs-keyword">value</span> : <span class="hljs-string">'kong'</span>,<br>    enumerable : <span class="hljs-literal">true</span> <span class="hljs-comment">//该属性是否可枚举</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>5、Object.defineProperties()<br>可添加多个属性,与Object.defineProperty()对应,<br>6、isPrototypeOf</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> a();<br><span class="hljs-built_in">console</span>.log(a.prototype.isPrototypeOf(b));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="安卓监听可视区域变化，让输入框移动至可视区域"><a href="#安卓监听可视区域变化，让输入框移动至可视区域" class="headerlink" title="安卓监听可视区域变化，让输入框移动至可视区域"></a>安卓监听可视区域变化，让输入框移动至可视区域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/Android/gi</span>.test(navigator.userAgent)) &#123;<br>          <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.activeElement.tagName === <span class="hljs-string">'INPUT'</span> || <span class="hljs-built_in">document</span>.activeElement.tagName === <span class="hljs-string">'TEXTAREA'</span>) &#123;<br>              <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">document</span>.activeElement.scrollIntoViewIfNeeded();<br>              &#125;, <span class="hljs-number">0</span>);<br>            &#125;<br>          &#125;);<br>        &#125;;<br></code></pre></td></tr></table></figure><h4 id="vue中平滑滚动到某个位置"><a href="#vue中平滑滚动到某个位置" class="headerlink" title="vue中平滑滚动到某个位置"></a>vue中平滑滚动到某个位置</h4><p>this.$refs.rule.scrollIntoView({ block: ‘start’, behavior: ‘smooth’ })</p><h4 id="好用的JavaSrcipt库与模块（包）"><a href="#好用的JavaSrcipt库与模块（包）" class="headerlink" title="好用的JavaSrcipt库与模块（包）"></a>好用的JavaSrcipt库与模块（包）</h4><h5 id="日期时间处理库"><a href="#日期时间处理库" class="headerlink" title="日期时间处理库"></a>日期时间处理库</h5><p>1、<a href="http://momentjs.cn/" target="_blank" rel="noopener">monent.js</a><br>2、<a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener">day.js</a><br>day相对于monent要轻量许多</p><h5 id="高精度数学运算"><a href="#高精度数学运算" class="headerlink" title="高精度数学运算"></a>高精度数学运算</h5><p><a href="https://developer.aliyun.com/mirror/npm/package/number-precision" target="_blank" rel="noopener">number-precision</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>strip(num)         <span class="hljs-comment">// strip a number to nearest right number</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>plus(num1, num2, num3, ...)   <span class="hljs-comment">// addition, num + num2 + num3, two numbers is required at least.</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>minus(num1, num2, num3, ...)  <span class="hljs-comment">// subtraction, num1 - num2 - num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>times(num1, num2, num3, ...)  <span class="hljs-comment">// multiplication, num1 * num2 * num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>divide(num1, num2, num3, ...) <span class="hljs-comment">// division, num1 / num2 / num3</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NP</span>.</span></span>round(num, ratio)  <span class="hljs-comment">// round a number based on ratio</span><br></code></pre></td></tr></table></figure><h5 id="实用工具库"><a href="#实用工具库" class="headerlink" title="实用工具库"></a>实用工具库</h5><p><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a><br>lodash 是一个 JavaScript 实用工具库，提供一致性，及模块化、性能和配件等功能。<br>Lodash 消除了处理数组的麻烦，从而简化了 JavaScript、 数字、对象、字符串等</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JS的数据类型及深浅拷贝介绍</title>
    <link href="/myblog/2020/06/09/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%8B%E7%BB%8D/"/>
    <url>/myblog/2020/06/09/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><p>JS分为两种数据类型：<br><strong>基本数组类型</strong>： Number、String、Boolean、Null、Undefined、Symbol<br><strong>引用数组类型</strong>：Object(JS中除了基本数据类型，其他都是对象。例如数组、函数、正则表达式等)</p><h5 id="（1）基本数据类型（存放在栈中）"><a href="#（1）基本数据类型（存放在栈中）" class="headerlink" title="（1）基本数据类型（存放在栈中）"></a>（1）基本数据类型（存放在栈中）</h5><p>基本数据类型是指直接存放在栈中的简单数据段，数据大小确定，内存k空间可分配，按值存放和访问<br><strong>注：栈(stack)和堆（heap）</strong><br>stack为自动分配的内存空间，它由系统自动释放；而heap则是动态分配的内存，大小也不一定会自动释放</p><h5 id="（2）引用数据类型（存放在堆内存中的对象）"><a href="#（2）引用数据类型（存放在堆内存中的对象）" class="headerlink" title="（2）引用数据类型（存放在堆内存中的对象）"></a>（2）引用数据类型（存放在堆内存中的对象）</h5><p>引用数据类型是存放在堆内存里的对象，而指向堆内存值的引用也就是指针是存在栈内存中的。</p><h3 id="2、浅拷贝"><a href="#2、浅拷贝" class="headerlink" title="2、浅拷贝"></a>2、浅拷贝</h3><p>当我们使用对象拷贝时，如果属性是对象或者数组时，我们只是拷贝的数组或对象的引用地址，因此两者的属性值会指向同一个内存空间。实现数组的片浅拷贝使用concat、slice<br>这个两个是技巧类，如何实现一个浅拷贝呢？简单的思路是遍历对象，把属性和属性值都放在一个新的对象中<br>如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> shallowCopy = <span class="hljs-function"><span class="hljs-keyword">function</span></span>(obj) &#123;<br>  <span class="hljs-comment">// 只拷贝对象</span><br>  <span class="hljs-keyword">if</span> (typeof obj !== <span class="hljs-string">'object'</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 根据obj的类型判断是新建一个数组还是对象</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = obj instanceof <span class="hljs-keyword">Array</span> ? [] : <span class="hljs-type"></span>&#123;&#125;;<br>  <span class="hljs-comment">// 遍历obj，并且判断是obj的属性才拷贝</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>          <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[key] = obj[key];<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let a = &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125;&#125;<br>const b = shallowCopy(a)<br>b.obj.name = <span class="hljs-string">'666'</span><br>console.log(b) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br>console.log(a) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p>这样如果改变b中的对象，a中的对象也会同时改变。</p><h3 id="3、深拷贝"><a href="#3、深拷贝" class="headerlink" title="3、深拷贝"></a>3、深拷贝</h3><p>实现数组或对象的深拷贝，可以使用JSON.parse(JSON.stringify(obj))<br>如何手写一个深度拷贝呢？思路是通过递归调用拷贝函数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> deepCopy = <span class="hljs-function"><span class="hljs-keyword">function</span></span>(obj) &#123;<br>  <span class="hljs-keyword">if</span> (typeof obj !== <span class="hljs-string">'object'</span>) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span> = obj instanceof <span class="hljs-keyword">Array</span> ? [] : <span class="hljs-type"></span>&#123;&#125;<br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>      <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span>[key] = typeof obj[key] === <span class="hljs-string">'object'</span> ? deepCopy(obj[key]) : <span class="hljs-type">obj</span>[key]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Obj</span><br><span class="hljs-type"></span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let a = &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125;&#125;<br>const b = deepCopy(a)<br>b.obj.name = <span class="hljs-string">'666'</span><br>console.log(b) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'666'</span> &#125; &#125;<br>console.log(a) // &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'123'</span>, obj: &#123; <span class="hljs-type">name</span>: <span class="hljs-string">'456'</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p>这样就实现了深度拷贝，当改变b中对象值时，a没有发生变化。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
